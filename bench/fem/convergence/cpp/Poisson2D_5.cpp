// This code conforms with the UFC specification version 2.3.0+
// and was automatically generated by FFC version 1.3.0+.
//
// This code was generated with the option '-l dolfin' and
// contains DOLFIN-specific wrappers that depend on DOLFIN.
// 
// This code was generated with the following parameters:
// 
//   cache_dir:                      ''
//   convert_exceptions_to_warnings: False
//   cpp_optimize:                   True
//   cpp_optimize_flags:             '-O2'
//   epsilon:                        1e-14
//   error_control:                  False
//   form_postfix:                   True
//   format:                         'dolfin'
//   log_level:                      10
//   log_prefix:                     ''
//   no-evaluate_basis:              True
//   no-evaluate_basis_derivatives:  True
//   no_ferari:                      True
//   optimize:                       True
//   output_dir:                     '.'
//   precision:                      15
//   quadrature_degree:              'auto'
//   quadrature_rule:                'auto'
//   representation:                 'auto'
//   restrict_keyword:               ''
//   split:                          True

#include "Poisson2D_5.h"

/// Constructor
poisson2d_5_finite_element_0::poisson2d_5_finite_element_0() : ufc::finite_element()
{
    // Do nothing
}

/// Destructor
poisson2d_5_finite_element_0::~poisson2d_5_finite_element_0()
{
    // Do nothing
}

/// Return a string identifying the finite element
const char* poisson2d_5_finite_element_0::signature() const
{
    return "FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 5, None)";
}

/// Return the cell shape
ufc::shape poisson2d_5_finite_element_0::cell_shape() const
{
    return ufc::triangle;
}

/// Return the topological dimension of the cell shape
std::size_t poisson2d_5_finite_element_0::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the cell shape
std::size_t poisson2d_5_finite_element_0::geometric_dimension() const
{
    return 2;
}

/// Return the dimension of the finite element function space
std::size_t poisson2d_5_finite_element_0::space_dimension() const
{
    return 21;
}

/// Return the rank of the value space
std::size_t poisson2d_5_finite_element_0::value_rank() const
{
    return 0;
}

/// Return the dimension of the value space for axis i
std::size_t poisson2d_5_finite_element_0::value_dimension(std::size_t i) const
{
    return 1;
}

/// Evaluate basis function i at given point x in cell
void poisson2d_5_finite_element_0::_evaluate_basis(std::size_t i,
                                    double* values,
                                    const double* x,
                                    const double* vertex_coordinates,
                                    int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis not generated (compiled with -fno-evaluate_basis)");
}

/// Evaluate all basis functions at given point x in cell
void poisson2d_5_finite_element_0::_evaluate_basis_all(double* values,
                                        const double* x,
                                        const double* vertex_coordinates,
                                        int cell_orientation)
{
    // Helper variable to hold values of a single dof.
    double dof_values = 0.0;
    
    // Loop dofs and call evaluate_basis
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis(r, &dof_values, x, vertex_coordinates, cell_orientation);
      values[r] = dof_values;
    } // end loop over 'r'
}

/// Evaluate order n derivatives of basis function i at given point x in cell
void poisson2d_5_finite_element_0::_evaluate_basis_derivatives(std::size_t i,
                                                std::size_t n,
                                                double* values,
                                                const double* x,
                                                const double* vertex_coordinates,
                                                int cell_orientation)
{
throw std::runtime_error("// Function evaluate_basis_derivatives not generated (compiled with -fno-evaluate_basis_derivatives)");
}

/// Evaluate order n derivatives of all basis functions at given point x in cell
void poisson2d_5_finite_element_0::_evaluate_basis_derivatives_all(std::size_t n,
                                                    double* values,
                                                    const double* x,
                                                    const double* vertex_coordinates,
                                                    int cell_orientation)
{
    // Call evaluate_basis_all if order of derivatives is equal to zero.
    if (n == 0)
    {
      _evaluate_basis_all(values, x, vertex_coordinates, cell_orientation);
      return ;
    }
    
    // Compute number of derivatives.
    unsigned int num_derivatives = 1;
    for (unsigned int r = 0; r < n; r++)
    {
      num_derivatives *= 2;
    } // end loop over 'r'
    
    // Set values equal to zero.
    for (unsigned int r = 0; r < 21; r++)
    {
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = 0.0;
      } // end loop over 's'
    } // end loop over 'r'
    
    // If order of derivatives is greater than the maximum polynomial degree, return zeros.
    if (n > 5)
    {
      return ;
    }
    
    // Helper variable to hold values of a single dof.
    double dof_values[32];
    for (unsigned int r = 0; r < 32; r++)
    {
      dof_values[r] = 0.0;
    } // end loop over 'r'
    
    // Loop dofs and call evaluate_basis_derivatives.
    for (unsigned int r = 0; r < 21; r++)
    {
      _evaluate_basis_derivatives(r, n, dof_values, x, vertex_coordinates, cell_orientation);
      for (unsigned int s = 0; s < num_derivatives; s++)
      {
        values[r*num_derivatives + s] = dof_values[s];
      } // end loop over 's'
    } // end loop over 'r'
}

/// Evaluate linear functional for dof i on the function f
double poisson2d_5_finite_element_0::evaluate_dof(std::size_t i,
                                   const ufc::function& f,
                                   const double* vertex_coordinates,
                                   int cell_orientation,
                                   const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    switch (i)
    {
    case 0:
      {
        y[0] = vertex_coordinates[0];
      y[1] = vertex_coordinates[1];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 1:
      {
        y[0] = vertex_coordinates[2];
      y[1] = vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 2:
      {
        y[0] = vertex_coordinates[4];
      y[1] = vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 3:
      {
        y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 4:
      {
        y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 5:
      {
        y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 6:
      {
        y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 7:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 8:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 9:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 10:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 11:
      {
        y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
      y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 12:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
      y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 13:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
      y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 14:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
      y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 15:
      {
        y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 16:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 17:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 18:
      {
        y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 19:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    case 20:
      {
        y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
      y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
      f.evaluate(vals, y, c);
      return vals[0];
        break;
      }
    }
    
    return 0.0;
}

/// Evaluate linear functionals for all dofs on the function f
void poisson2d_5_finite_element_0::evaluate_dofs(double* values,
                                  const ufc::function& f,
                                  const double* vertex_coordinates,
                                  int cell_orientation,
                                  const ufc::cell& c) const
{
    // Declare variables for result of evaluation
    double vals[1];
    
    // Declare variable for physical coordinates
    double y[2];
    y[0] = vertex_coordinates[0];
    y[1] = vertex_coordinates[1];
    f.evaluate(vals, y, c);
    values[0] = vals[0];
    y[0] = vertex_coordinates[2];
    y[1] = vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[1] = vals[0];
    y[0] = vertex_coordinates[4];
    y[1] = vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[2] = vals[0];
    y[0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[3] = vals[0];
    y[0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[4] = vals[0];
    y[0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[5] = vals[0];
    y[0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[6] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[7] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[8] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[9] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[10] = vals[0];
    y[0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    y[1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[11] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    y[1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[12] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    y[1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[13] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    y[1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    f.evaluate(vals, y, c);
    values[14] = vals[0];
    y[0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[15] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[16] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[17] = vals[0];
    y[0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[18] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[19] = vals[0];
    y[0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    y[1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    f.evaluate(vals, y, c);
    values[20] = vals[0];
}

/// Interpolate vertex values from dof values
void poisson2d_5_finite_element_0::interpolate_vertex_values(double* vertex_values,
                                              const double* dof_values,
                                              const double* vertex_coordinates,
                                              int cell_orientation,
                                              const ufc::cell& c) const
{
    // Evaluate function and change variables
    vertex_values[0] = dof_values[0];
    vertex_values[1] = dof_values[1];
    vertex_values[2] = dof_values[2];
}

/// Map coordinate xhat from reference cell to coordinate x in cell
void poisson2d_5_finite_element_0::map_from_reference_cell(double* x,
                                            const double* xhat,
                                            const ufc::cell& c) const
{
    throw std::runtime_error("map_from_reference_cell not yet implemented.");
}

/// Map from coordinate x in cell to coordinate xhat in reference cell
void poisson2d_5_finite_element_0::map_to_reference_cell(double* xhat,
                                          const double* x,
                                          const ufc::cell& c) const
{
    throw std::runtime_error("map_to_reference_cell not yet implemented.");
}

/// Return the number of sub elements (for a mixed element)
std::size_t poisson2d_5_finite_element_0::num_sub_elements() const
{
    return 0;
}

/// Create a new finite element for sub element i (for a mixed element)
ufc::finite_element* poisson2d_5_finite_element_0::create_sub_element(std::size_t i) const
{
    return 0;
}

/// Create a new class instance
ufc::finite_element* poisson2d_5_finite_element_0::create() const
{
    return new poisson2d_5_finite_element_0();
}

/// Constructor
poisson2d_5_dofmap_0::poisson2d_5_dofmap_0() : ufc::dofmap()
{
    // Do nothing
}

/// Destructor
poisson2d_5_dofmap_0::~poisson2d_5_dofmap_0()
{
    // Do nothing
}

/// Return a string identifying the dofmap
const char* poisson2d_5_dofmap_0::signature() const
{
    return "FFC dofmap for FiniteElement('Lagrange', Domain(Cell('triangle', 2)), 5, None)";
}

/// Return true iff mesh entities of topological dimension d are needed
bool poisson2d_5_dofmap_0::needs_mesh_entities(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return true;
        break;
      }
    case 1:
      {
        return true;
        break;
      }
    case 2:
      {
        return true;
        break;
      }
    }
    
    return false;
}

/// Return the topological dimension of the associated cell shape
std::size_t poisson2d_5_dofmap_0::topological_dimension() const
{
    return 2;
}

/// Return the geometric dimension of the associated cell shape
std::size_t poisson2d_5_dofmap_0::geometric_dimension() const
{
    return 2;
}

/// Return the dimension of the global finite element function space
std::size_t poisson2d_5_dofmap_0::global_dimension(const std::vector<std::size_t>&
                                            num_global_entities) const
{
    return num_global_entities[0] + 4*num_global_entities[1] + 6*num_global_entities[2];
}

/// Return the dimension of the local finite element function space for a cell
std::size_t poisson2d_5_dofmap_0::local_dimension() const
{
    return 21;
}

/// Return the number of dofs on each cell facet
std::size_t poisson2d_5_dofmap_0::num_facet_dofs() const
{
    return 6;
}

/// Return the number of dofs associated with each cell entity of dimension d
std::size_t poisson2d_5_dofmap_0::num_entity_dofs(std::size_t d) const
{
    switch (d)
    {
    case 0:
      {
        return 1;
        break;
      }
    case 1:
      {
        return 4;
        break;
      }
    case 2:
      {
        return 6;
        break;
      }
    }
    
    return 0;
}

/// Tabulate the local-to-global mapping of dofs on a cell
void poisson2d_5_dofmap_0::tabulate_dofs(std::size_t* dofs,
                                  const std::vector<std::size_t>& num_global_entities,
                                  const ufc::cell& c) const
{
    unsigned int offset = 0;
    dofs[0] = offset + c.entity_indices[0][0];
    dofs[1] = offset + c.entity_indices[0][1];
    dofs[2] = offset + c.entity_indices[0][2];
    offset += num_global_entities[0];
    dofs[3] = offset + 4*c.entity_indices[1][0];
    dofs[4] = offset + 4*c.entity_indices[1][0] + 1;
    dofs[5] = offset + 4*c.entity_indices[1][0] + 2;
    dofs[6] = offset + 4*c.entity_indices[1][0] + 3;
    dofs[7] = offset + 4*c.entity_indices[1][1];
    dofs[8] = offset + 4*c.entity_indices[1][1] + 1;
    dofs[9] = offset + 4*c.entity_indices[1][1] + 2;
    dofs[10] = offset + 4*c.entity_indices[1][1] + 3;
    dofs[11] = offset + 4*c.entity_indices[1][2];
    dofs[12] = offset + 4*c.entity_indices[1][2] + 1;
    dofs[13] = offset + 4*c.entity_indices[1][2] + 2;
    dofs[14] = offset + 4*c.entity_indices[1][2] + 3;
    offset += 4*num_global_entities[1];
    dofs[15] = offset + 6*c.entity_indices[2][0];
    dofs[16] = offset + 6*c.entity_indices[2][0] + 1;
    dofs[17] = offset + 6*c.entity_indices[2][0] + 2;
    dofs[18] = offset + 6*c.entity_indices[2][0] + 3;
    dofs[19] = offset + 6*c.entity_indices[2][0] + 4;
    dofs[20] = offset + 6*c.entity_indices[2][0] + 5;
    offset += 6*num_global_entities[2];
}

/// Tabulate the local-to-local mapping from facet dofs to cell dofs
void poisson2d_5_dofmap_0::tabulate_facet_dofs(std::size_t* dofs,
                                        std::size_t facet) const
{
    switch (facet)
    {
    case 0:
      {
        dofs[0] = 1;
      dofs[1] = 2;
      dofs[2] = 3;
      dofs[3] = 4;
      dofs[4] = 5;
      dofs[5] = 6;
        break;
      }
    case 1:
      {
        dofs[0] = 0;
      dofs[1] = 2;
      dofs[2] = 7;
      dofs[3] = 8;
      dofs[4] = 9;
      dofs[5] = 10;
        break;
      }
    case 2:
      {
        dofs[0] = 0;
      dofs[1] = 1;
      dofs[2] = 11;
      dofs[3] = 12;
      dofs[4] = 13;
      dofs[5] = 14;
        break;
      }
    }
    
}

/// Tabulate the local-to-local mapping of dofs on entity (d, i)
void poisson2d_5_dofmap_0::tabulate_entity_dofs(std::size_t* dofs,
                                  std::size_t d, std::size_t i) const
{
    if (d > 2)
    {
    throw std::runtime_error("d is larger than dimension (2)");
    }
    
    switch (d)
    {
    case 0:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 0;
          break;
        }
      case 1:
        {
          dofs[0] = 1;
          break;
        }
      case 2:
        {
          dofs[0] = 2;
          break;
        }
      }
      
        break;
      }
    case 1:
      {
        if (i > 2)
      {
      throw std::runtime_error("i is larger than number of entities (2)");
      }
      
      switch (i)
      {
      case 0:
        {
          dofs[0] = 3;
        dofs[1] = 4;
        dofs[2] = 5;
        dofs[3] = 6;
          break;
        }
      case 1:
        {
          dofs[0] = 7;
        dofs[1] = 8;
        dofs[2] = 9;
        dofs[3] = 10;
          break;
        }
      case 2:
        {
          dofs[0] = 11;
        dofs[1] = 12;
        dofs[2] = 13;
        dofs[3] = 14;
          break;
        }
      }
      
        break;
      }
    case 2:
      {
        if (i > 0)
      {
      throw std::runtime_error("i is larger than number of entities (0)");
      }
      
      dofs[0] = 15;
      dofs[1] = 16;
      dofs[2] = 17;
      dofs[3] = 18;
      dofs[4] = 19;
      dofs[5] = 20;
        break;
      }
    }
    
}

/// Tabulate the coordinates of all dofs on a cell
void poisson2d_5_dofmap_0::tabulate_coordinates(double** dof_coordinates,
                                         const double* vertex_coordinates) const
{
    dof_coordinates[0][0] = vertex_coordinates[0];
    dof_coordinates[0][1] = vertex_coordinates[1];
    dof_coordinates[1][0] = vertex_coordinates[2];
    dof_coordinates[1][1] = vertex_coordinates[3];
    dof_coordinates[2][0] = vertex_coordinates[4];
    dof_coordinates[2][1] = vertex_coordinates[5];
    dof_coordinates[3][0] = 0.8*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[3][1] = 0.8*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[4][0] = 0.6*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[4][1] = 0.6*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[5][0] = 0.4*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[5][1] = 0.4*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
    dof_coordinates[6][0] = 0.2*vertex_coordinates[2] + 0.8*vertex_coordinates[4];
    dof_coordinates[6][1] = 0.2*vertex_coordinates[3] + 0.8*vertex_coordinates[5];
    dof_coordinates[7][0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[4];
    dof_coordinates[7][1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[5];
    dof_coordinates[8][0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[4];
    dof_coordinates[8][1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[5];
    dof_coordinates[9][0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[4];
    dof_coordinates[9][1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[5];
    dof_coordinates[10][0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[4];
    dof_coordinates[10][1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[5];
    dof_coordinates[11][0] = 0.8*vertex_coordinates[0] + 0.2*vertex_coordinates[2];
    dof_coordinates[11][1] = 0.8*vertex_coordinates[1] + 0.2*vertex_coordinates[3];
    dof_coordinates[12][0] = 0.6*vertex_coordinates[0] + 0.4*vertex_coordinates[2];
    dof_coordinates[12][1] = 0.6*vertex_coordinates[1] + 0.4*vertex_coordinates[3];
    dof_coordinates[13][0] = 0.4*vertex_coordinates[0] + 0.6*vertex_coordinates[2];
    dof_coordinates[13][1] = 0.4*vertex_coordinates[1] + 0.6*vertex_coordinates[3];
    dof_coordinates[14][0] = 0.2*vertex_coordinates[0] + 0.8*vertex_coordinates[2];
    dof_coordinates[14][1] = 0.2*vertex_coordinates[1] + 0.8*vertex_coordinates[3];
    dof_coordinates[15][0] = 0.6*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[15][1] = 0.6*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[16][0] = 0.4*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[16][1] = 0.4*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[17][0] = 0.2*vertex_coordinates[0] + 0.6*vertex_coordinates[2] + 0.2*vertex_coordinates[4];
    dof_coordinates[17][1] = 0.2*vertex_coordinates[1] + 0.6*vertex_coordinates[3] + 0.2*vertex_coordinates[5];
    dof_coordinates[18][0] = 0.4*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[18][1] = 0.4*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[19][0] = 0.2*vertex_coordinates[0] + 0.4*vertex_coordinates[2] + 0.4*vertex_coordinates[4];
    dof_coordinates[19][1] = 0.2*vertex_coordinates[1] + 0.4*vertex_coordinates[3] + 0.4*vertex_coordinates[5];
    dof_coordinates[20][0] = 0.2*vertex_coordinates[0] + 0.2*vertex_coordinates[2] + 0.6*vertex_coordinates[4];
    dof_coordinates[20][1] = 0.2*vertex_coordinates[1] + 0.2*vertex_coordinates[3] + 0.6*vertex_coordinates[5];
}

/// Return the number of sub dofmaps (for a mixed element)
std::size_t poisson2d_5_dofmap_0::num_sub_dofmaps() const
{
    return 0;
}

/// Create a new dofmap for sub dofmap i (for a mixed element)
ufc::dofmap* poisson2d_5_dofmap_0::create_sub_dofmap(std::size_t i) const
{
    return 0;
}

/// Create a new class instance
ufc::dofmap* poisson2d_5_dofmap_0::create() const
{
    return new poisson2d_5_dofmap_0();
}

/// Constructor
poisson2d_5_cell_integral_0_otherwise::poisson2d_5_cell_integral_0_otherwise() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
poisson2d_5_cell_integral_0_otherwise::~poisson2d_5_cell_integral_0_otherwise()
{
    // Do nothing
}

/// Tabulate which form coefficients are used by this integral
const std::vector<bool> & poisson2d_5_cell_integral_0_otherwise::enabled_coefficients() const
{
    static const std::vector<bool> enabled({});
    return enabled;
}

/// Tabulate the tensor for the contribution from a local cell
void poisson2d_5_cell_integral_0_otherwise::tabulate_tensor(double*  A,
                                    const double * const *  w,
                                    const double*  vertex_coordinates,
                                    int cell_orientation) const
{
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    8
    // Number of operations (multiply-add pairs) for tensor contraction: 1259
    // Total number of operations (multiply-add pairs):                  1270
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0_0 = det*(K[0]*K[0] + K[1]*K[1]);
    const double G0_0_1 = det*(K[0]*K[2] + K[1]*K[3]);
    const double G0_1_0 = det*(K[2]*K[0] + K[3]*K[1]);
    const double G0_1_1 = det*(K[2]*K[2] + K[3]*K[3]);
    
    // Compute element tensor
    A[0] = 0.342406580687829*G0_0_0 + 0.342406580687829*G0_0_1 + 0.342406580687829*G0_1_0 + 0.34240658068783*G0_1_1;
    A[1] = -0.040998401675485*G0_0_0 - 0.040998401675485*G0_1_0;
    A[2] = -0.0409984016754849*G0_0_1 - 0.040998401675485*G0_1_1;
    A[3] = -0.0408192791005283*G0_0_0 - 0.0408192791005288*G0_0_1 - 0.0408192791005283*G0_1_0 - 0.0408192791005287*G0_1_1;
    A[4] = -0.0379774305555567*G0_0_0 - 0.0379774305555553*G0_0_1 - 0.0379774305555568*G0_1_0 - 0.0379774305555555*G0_1_1;
    A[5] = -0.0379774305555535*G0_0_0 - 0.0379774305555544*G0_0_1 - 0.0379774305555535*G0_1_0 - 0.0379774305555544*G0_1_1;
    A[6] = -0.0408192791005288*G0_0_0 - 0.0408192791005282*G0_0_1 - 0.0408192791005289*G0_1_0 - 0.0408192791005282*G0_1_1;
    A[7] = 0.202287946428571*G0_0_0 - 0.64802758487654*G0_0_1 + 0.202287946428571*G0_1_0 - 0.648027584876541*G0_1_1;
    A[8] = -0.0158454585537924*G0_0_0 + 0.594204695767193*G0_0_1 - 0.0158454585537926*G0_1_0 + 0.594204695767194*G0_1_1;
    A[9] = -0.0696683476631389*G0_0_0 - 0.449959352954143*G0_0_1 - 0.0696683476631386*G0_1_0 - 0.449959352954143*G0_1_1;
    A[10] = 0.0408192791005288*G0_0_0 + 0.202374063051146*G0_0_1 + 0.0408192791005289*G0_1_0 + 0.202374063051146*G0_1_1;
    A[11] = -0.64802758487654*G0_0_0 + 0.202287946428571*G0_0_1 - 0.648027584876541*G0_1_0 + 0.202287946428571*G0_1_1;
    A[12] = 0.594204695767193*G0_0_0 - 0.0158454585537918*G0_0_1 + 0.594204695767193*G0_1_0 - 0.0158454585537916*G0_1_1;
    A[13] = -0.449959352954142*G0_0_0 - 0.06966834766314*G0_0_1 - 0.449959352954142*G0_1_0 - 0.0696683476631397*G0_1_1;
    A[14] = 0.202374063051146*G0_0_0 + 0.0408192791005294*G0_0_1 + 0.202374063051146*G0_1_0 + 0.0408192791005293*G0_1_1;
    A[15] = -0.215291556437389*G0_0_0 - 0.215291556437391*G0_0_1 - 0.215291556437389*G0_1_0 - 0.215291556437392*G0_1_1;
    A[16] = -0.053822889109347*G0_0_0 - 0.0538228891093451*G0_0_1 - 0.0538228891093473*G0_1_0 - 0.0538228891093456*G0_1_1;
    A[17] = 0.107645778218694*G0_0_0 + 0.107645778218694*G0_0_1 + 0.107645778218694*G0_1_0 + 0.107645778218694*G0_1_1;
    A[18] = -0.053822889109347*G0_0_0 - 0.0538228891093465*G0_0_1 - 0.0538228891093471*G0_1_0 - 0.0538228891093456*G0_1_1;
    A[19] = 0.107645778218696*G0_0_0 + 0.107645778218694*G0_0_1 + 0.107645778218696*G0_1_0 + 0.107645778218695*G0_1_1;
    A[20] = 0.107645778218693*G0_0_0 + 0.107645778218693*G0_0_1 + 0.107645778218692*G0_1_0 + 0.107645778218693*G0_1_1;
    A[21] = -0.040998401675485*G0_0_0 - 0.040998401675485*G0_0_1;
    A[22] = 0.342406580687829*G0_0_0;
    A[23] = 0.0409984016754845*G0_0_1;
    A[24] = 0.20228794642857*G0_0_0 + 0.85031553130511*G0_0_1;
    A[25] = -0.015845458553793*G0_0_0 - 0.610050154320987*G0_0_1;
    A[26] = -0.0696683476631378*G0_0_0 + 0.380291005291004*G0_0_1;
    A[27] = 0.0408192791005279*G0_0_0 - 0.161554783950617*G0_0_1;
    A[28] = -0.0408192791005295*G0_0_0;
    A[29] = -0.0379774305555558*G0_0_0;
    A[30] = -0.0379774305555547*G0_0_0;
    A[31] = -0.0408192791005279*G0_0_0;
    A[32] = 0.202374063051145*G0_0_0 + 0.161554783950616*G0_0_1;
    A[33] = -0.449959352954142*G0_0_0 - 0.380291005291001*G0_0_1;
    A[34] = 0.594204695767192*G0_0_0 + 0.610050154320982*G0_0_1;
    A[35] = -0.64802758487654*G0_0_0 - 0.85031553130511*G0_0_1;
    A[36] = 0.107645778218697*G0_0_0;
    A[37] = -0.0538228891093511*G0_0_0;
    A[38] = -0.215291556437386*G0_0_0;
    A[39] = 0.107645778218695*G0_0_0;
    A[40] = -0.0538228891093459*G0_0_0;
    A[41] = 0.107645778218692*G0_0_0;
    A[42] = -0.0409984016754849*G0_1_0 - 0.0409984016754849*G0_1_1;
    A[43] = 0.0409984016754845*G0_1_0;
    A[44] = 0.34240658068783*G0_1_1;
    A[45] = -0.161554783950617*G0_1_0 + 0.040819279100528*G0_1_1;
    A[46] = 0.380291005291006*G0_1_0 - 0.0696683476631372*G0_1_1;
    A[47] = -0.610050154320987*G0_1_0 - 0.0158454585537929*G0_1_1;
    A[48] = 0.850315531305113*G0_1_0 + 0.202287946428571*G0_1_1;
    A[49] = 0.161554783950617*G0_1_0 + 0.202374063051146*G0_1_1;
    A[50] = -0.380291005291005*G0_1_0 - 0.449959352954144*G0_1_1;
    A[51] = 0.610050154320988*G0_1_0 + 0.594204695767195*G0_1_1;
    A[52] = -0.850315531305113*G0_1_0 - 0.648027584876543*G0_1_1;
    A[53] = -0.0408192791005286*G0_1_1;
    A[54] = -0.0379774305555548*G0_1_1;
    A[55] = -0.0379774305555547*G0_1_1;
    A[56] = -0.0408192791005284*G0_1_1;
    A[57] = 0.107645778218693*G0_1_1;
    A[58] = 0.107645778218693*G0_1_1;
    A[59] = 0.107645778218693*G0_1_1;
    A[60] = -0.0538228891093453*G0_1_1;
    A[61] = -0.0538228891093469*G0_1_1;
    A[62] = -0.21529155643739*G0_1_1;
    A[63] = -0.0408192791005283*G0_0_0 - 0.0408192791005283*G0_0_1 - 0.0408192791005288*G0_1_0 - 0.0408192791005287*G0_1_1;
    A[64] = 0.20228794642857*G0_0_0 + 0.85031553130511*G0_1_0;
    A[65] = -0.161554783950617*G0_0_1 + 0.040819279100528*G0_1_1;
    A[66] = 1.98929398148147*G0_0_0 + 1.28098476080246*G0_0_1 + 1.28098476080246*G0_1_0 + 2.56196952160492*G0_1_1;
    A[67] = -0.906377452601408*G0_0_0 + 0.796578758818341*G0_0_1 - 0.529617228835979*G0_1_0 - 1.39508928571428*G0_1_1;
    A[68] = 0.818107914462078*G0_0_0 - 0.482253086419754*G0_0_1 + 0.232514880952383*G0_1_0 + 0.895612874779537*G0_1_1;
    A[69] = -0.340160659171074*G0_0_0 + 0.329396081349207*G0_0_1 - 0.0710462136243402*G0_1_0 - 0.340160659171075*G0_1_1;
    A[70] = 0.142092427248674*G0_0_0 + 0.071046213624336*G0_0_1 + 0.0710462136243343*G0_1_0;
    A[71] = 0.131327849426809*G0_0_0 + 0.0301408179012383*G0_0_1 + 0.0301408179012343*G0_1_0;
    A[72] = 0.172233245149907*G0_0_0 + 0.0301408179012304*G0_0_1 + 0.0301408179012336*G0_1_0;
    A[73] = 0.340160659171073*G0_0_0 + 0.071046213624341*G0_0_1 + 0.07104621362434*G0_1_0;
    A[74] = 0.198068231922394*G0_0_0 + 0.269114445546733*G0_0_1 + 0.269114445546734*G0_1_0 + 0.340160659171071*G0_1_1;
    A[75] = -0.359536899250434*G0_0_0 - 0.663097993827153*G0_0_1 - 0.663097993827154*G0_1_0 - 0.895612874779528*G0_1_1;
    A[76] = 0.286337770061721*G0_0_0 + 0.865472056878297*G0_0_1 + 0.865472056878298*G0_1_0 + 1.39508928571427*G0_1_1;
    A[77] = -0.286337770061723*G0_0_0 - 1.28098476080246*G0_0_1 - 1.28098476080246*G0_1_0 - 2.56196952160492*G0_1_1;
    A[78] = -0.667403824955902*G0_0_0 - 0.262655698853614*G0_0_1 - 0.262655698853606*G0_1_0;
    A[79] = 1.35633680555555*G0_0_0 + 0.572675540123454*G0_0_1 + 0.572675540123444*G0_1_0;
    A[80] = -2.82031938932979*G0_0_0 - 1.66205081569664*G0_0_1 - 1.66205081569663*G0_1_0;
    A[81] = -0.41981853505291*G0_0_0 - 0.0731991291887149*G0_0_1 - 0.0731991291887122*G0_1_0;
    A[82] = 1.19486813822751*G0_0_0 + 0.572675540123454*G0_0_1 + 0.572675540123457*G0_1_0;
    A[83] = -0.990341159611984*G0_0_0 - 0.262655698853613*G0_0_1 - 0.262655698853616*G0_1_0;
    A[84] = -0.0379774305555567*G0_0_0 - 0.0379774305555568*G0_0_1 - 0.0379774305555553*G0_1_0 - 0.0379774305555555*G0_1_1;
    A[85] = -0.0158454585537931*G0_0_0 - 0.610050154320987*G0_1_0;
    A[86] = 0.380291005291006*G0_0_1 - 0.0696683476631372*G0_1_1;
    A[87] = -0.906377452601408*G0_0_0 - 0.529617228835979*G0_0_1 + 0.796578758818341*G0_1_0 - 1.39508928571428*G0_1_1;
    A[88] = 3.07436342592591*G0_0_0 + 1.17549189814815*G0_0_1 + 1.17549189814815*G0_1_0 + 3.6944031084656*G0_1_1;
    A[89] = -1.80414324294532*G0_0_0 + 0.699697558421509*G0_0_1 - 0.350925236992952*G0_1_0 - 1.80414324294533*G0_1_1;
    A[90] = 0.895612874779542*G0_0_0 - 0.48225308641975*G0_0_1 + 0.232514880952386*G0_1_0 + 0.818107914462082*G0_1_1;
    A[91] = 0.131327849426809*G0_0_0 + 0.101187031525577*G0_0_1 + 0.101187031525575*G0_1_0 + 0.0710462136243402*G0_1_1;
    A[92] = -0.297102347883601*G0_0_0 - 0.148551173941804*G0_0_1 - 0.1485511739418*G0_1_0 - 0.0172233245149933*G0_1_1;
    A[93] = -0.219597387566131*G0_0_0 - 0.0624345513668362*G0_0_1 - 0.0624345513668434*G0_1_0 - 0.0172233245149894*G0_1_1;
    A[94] = -0.895612874779541*G0_0_0 - 0.232514880952385*G0_0_1 - 0.232514880952386*G0_1_0 + 0.071046213624336*G0_1_1;
    A[95] = 0.111951609347444*G0_0_0 + 0.142092427248675*G0_0_1 + 0.142092427248676*G0_1_0 + 0.17223324514991*G0_1_1;
    A[96] = -0.111951609347443*G0_0_0 - 0.15716283619929*G0_0_1 - 0.157162836199291*G0_1_0 - 0.219597387566136*G0_1_1;
    A[97] = 0.103339947089946*G0_0_0 + 0.133480764991181*G0_0_1 + 0.133480764991177*G0_1_0 + 0.266961529982364*G0_1_1;
    A[98] = -0.049517057980599*G0_0_0 + 0.529617228835978*G0_0_1 + 0.52961722883598*G0_1_0 + 1.39508928571428*G0_1_1;
    A[99] = -0.344466490299821*G0_0_0 - 0.447806437389769*G0_0_1 - 0.447806437389773*G0_1_0 - 0.516699735449737*G0_1_1;
    A[100] = 0.3875248015873*G0_0_0 + 0.859013310185176*G0_0_1 + 0.859013310185189*G0_1_0 + 1.01187031525573*G0_1_1;
    A[101] = 0.731991291887123*G0_0_0 - 1.30897266313933*G0_0_1 - 1.30897266313933*G0_1_0 - 3.96136463844796*G0_1_1;
    A[102] = 1.03339947089947*G0_0_0 + 0.374607308201062*G0_0_1 + 0.374607308201059*G0_1_0 + 0.0430583112874812*G0_1_1;
    A[103] = -3.81066054894179*G0_0_0 - 1.4015480324074*G0_0_1 - 1.4015480324074*G0_1_0 + 1.01187031525573*G0_1_1;
    A[104] = 2.02374063051146*G0_0_0 + 0.413359788359783*G0_0_1 + 0.413359788359796*G0_1_0 - 0.516699735449734*G0_1_1;
    A[105] = -0.0379774305555535*G0_0_0 - 0.0379774305555535*G0_0_1 - 0.0379774305555544*G0_1_0 - 0.0379774305555544*G0_1_1;
    A[106] = -0.0696683476631378*G0_0_0 + 0.380291005291005*G0_1_0;
    A[107] = -0.610050154320987*G0_0_1 - 0.0158454585537929*G0_1_1;
    A[108] = 0.818107914462078*G0_0_0 + 0.232514880952383*G0_0_1 - 0.482253086419754*G0_1_0 + 0.895612874779537*G0_1_1;
    A[109] = -1.80414324294532*G0_0_0 - 0.350925236992952*G0_0_1 + 0.699697558421509*G0_1_0 - 1.80414324294533*G0_1_1;
    A[110] = 3.6944031084656*G0_0_0 + 1.17549189814815*G0_0_1 + 1.17549189814815*G0_1_0 + 3.07436342592592*G0_1_1;
    A[111] = -1.39508928571428*G0_0_0 + 0.79657875881834*G0_0_1 - 0.529617228835979*G0_1_0 - 0.906377452601409*G0_1_1;
    A[112] = 0.172233245149903*G0_0_0 + 0.142092427248668*G0_0_1 + 0.142092427248671*G0_1_0 + 0.111951609347437*G0_1_1;
    A[113] = -0.219597387566127*G0_0_0 - 0.15716283619928*G0_0_1 - 0.157162836199288*G0_1_0 - 0.111951609347434*G0_1_1;
    A[114] = 0.266961529982348*G0_0_0 + 0.133480764991167*G0_0_1 + 0.133480764991176*G0_1_0 + 0.103339947089939*G0_1_1;
    A[115] = 1.39508928571428*G0_0_0 + 0.529617228835985*G0_0_1 + 0.52961722883598*G0_1_0 - 0.0495170579805949*G0_1_1;
    A[116] = 0.0710462136243345*G0_0_0 + 0.101187031525572*G0_0_1 + 0.101187031525571*G0_1_0 + 0.131327849426805*G0_1_1;
    A[117] = -0.0172233245149891*G0_0_0 - 0.148551173941799*G0_0_1 - 0.148551173941797*G0_1_0 - 0.297102347883594*G0_1_1;
    A[118] = -0.0172233245149933*G0_0_0 - 0.0624345513668466*G0_0_1 - 0.062434551366844*G0_1_0 - 0.219597387566141*G0_1_1;
    A[119] = 0.0710462136243394*G0_0_0 - 0.232514880952382*G0_0_1 - 0.23251488095238*G0_1_0 - 0.895612874779538*G0_1_1;
    A[120] = -0.516699735449725*G0_0_0 - 0.447806437389766*G0_0_1 - 0.44780643738976*G0_1_0 - 0.344466490299818*G0_1_1;
    A[121] = 0.0430583112874762*G0_0_0 + 0.374607308201063*G0_0_1 + 0.37460730820105*G0_1_0 + 1.03339947089946*G0_1_1;
    A[122] = -0.516699735449733*G0_0_0 + 0.413359788359797*G0_0_1 + 0.413359788359792*G0_1_0 + 2.02374063051147*G0_1_1;
    A[123] = 1.01187031525571*G0_0_0 + 0.85901331018517*G0_0_1 + 0.859013310185173*G0_1_0 + 0.387524801587293*G0_1_1;
    A[124] = 1.01187031525574*G0_0_0 - 1.40154803240741*G0_0_1 - 1.40154803240739*G0_1_0 - 3.81066054894178*G0_1_1;
    A[125] = -3.96136463844795*G0_0_0 - 1.30897266313932*G0_0_1 - 1.30897266313932*G0_1_0 + 0.731991291887127*G0_1_1;
    A[126] = -0.0408192791005288*G0_0_0 - 0.0408192791005289*G0_0_1 - 0.0408192791005282*G0_1_0 - 0.0408192791005282*G0_1_1;
    A[127] = 0.0408192791005279*G0_0_0 - 0.161554783950617*G0_1_0;
    A[128] = 0.850315531305113*G0_0_1 + 0.202287946428571*G0_1_1;
    A[129] = -0.340160659171074*G0_0_0 - 0.0710462136243402*G0_0_1 + 0.329396081349207*G0_1_0 - 0.340160659171075*G0_1_1;
    A[130] = 0.895612874779542*G0_0_0 + 0.232514880952386*G0_0_1 - 0.48225308641975*G0_1_0 + 0.818107914462082*G0_1_1;
    A[131] = -1.39508928571428*G0_0_0 - 0.529617228835979*G0_0_1 + 0.79657875881834*G0_1_0 - 0.906377452601409*G0_1_1;
    A[132] = 2.56196952160493*G0_0_0 + 1.28098476080247*G0_0_1 + 1.28098476080247*G0_1_0 + 1.98929398148148*G0_1_1;
    A[133] = 0.340160659171077*G0_0_0 + 0.269114445546736*G0_0_1 + 0.269114445546736*G0_1_0 + 0.198068231922395*G0_1_1;
    A[134] = -0.895612874779543*G0_0_0 - 0.66309799382716*G0_0_1 - 0.663097993827159*G0_1_0 - 0.359536899250436*G0_1_1;
    A[135] = 1.39508928571429*G0_0_0 + 0.865472056878307*G0_0_1 + 0.865472056878304*G0_1_0 + 0.286337770061725*G0_1_1;
    A[136] = -2.56196952160493*G0_0_0 - 1.28098476080247*G0_0_1 - 1.28098476080247*G0_1_0 - 0.286337770061727*G0_1_1;
    A[137] = 0.071046213624339*G0_0_1 + 0.0710462136243364*G0_1_0 + 0.142092427248677*G0_1_1;
    A[138] = 0.0301408179012363*G0_0_1 + 0.0301408179012365*G0_1_0 + 0.131327849426808*G0_1_1;
    A[139] = 0.0301408179012354*G0_0_1 + 0.0301408179012324*G0_1_0 + 0.172233245149911*G0_1_1;
    A[140] = 0.0710462136243395*G0_0_1 + 0.07104621362434*G0_1_0 + 0.340160659171075*G0_1_1;
    A[141] = -0.262655698853621*G0_0_1 - 0.262655698853616*G0_1_0 - 0.667403824955912*G0_1_1;
    A[142] = -0.0731991291887149*G0_0_1 - 0.0731991291887087*G0_1_0 - 0.419818535052907*G0_1_1;
    A[143] = -0.262655698853619*G0_0_1 - 0.262655698853618*G0_1_0 - 0.990341159611993*G0_1_1;
    A[144] = 0.572675540123464*G0_0_1 + 0.572675540123455*G0_1_0 + 1.35633680555556*G0_1_1;
    A[145] = 0.572675540123455*G0_0_1 + 0.572675540123454*G0_1_0 + 1.19486813822751*G0_1_1;
    A[146] = -1.66205081569665*G0_0_1 - 1.66205081569664*G0_1_0 - 2.8203193893298*G0_1_1;
    A[147] = 0.202287946428571*G0_0_0 + 0.202287946428571*G0_0_1 - 0.64802758487654*G0_1_0 - 0.648027584876541*G0_1_1;
    A[148] = -0.0408192791005295*G0_0_0;
    A[149] = 0.161554783950617*G0_0_1 + 0.202374063051146*G0_1_1;
    A[150] = 0.142092427248674*G0_0_0 + 0.0710462136243343*G0_0_1 + 0.0710462136243361*G0_1_0;
    A[151] = 0.131327849426809*G0_0_0 + 0.101187031525575*G0_0_1 + 0.101187031525577*G0_1_0 + 0.0710462136243402*G0_1_1;
    A[152] = 0.172233245149904*G0_0_0 + 0.142092427248671*G0_0_1 + 0.142092427248668*G0_1_0 + 0.111951609347437*G0_1_1;
    A[153] = 0.340160659171077*G0_0_0 + 0.269114445546736*G0_0_1 + 0.269114445546736*G0_1_0 + 0.198068231922395*G0_1_1;
    A[154] = 1.98929398148147*G0_0_0 + 0.708309220679008*G0_0_1 + 0.708309220679008*G0_1_0 + 1.98929398148147*G0_1_1;
    A[155] = -0.906377452601405*G0_0_0 - 1.70295621141974*G0_0_1 - 0.376760223765427*G0_1_0 - 2.56842826829805*G0_1_1;
    A[156] = 0.818107914462077*G0_0_0 + 1.30036100088183*G0_0_1 + 0.585593033509694*G0_1_0 + 1.96345899470898*G0_1_1;
    A[157] = -0.340160659171077*G0_0_0 - 0.66955674052028*G0_0_1 - 0.269114445546736*G0_1_0 - 0.938671186067017*G0_1_1;
    A[158] = -0.286337770061727*G0_0_0 + 0.994646990740736*G0_0_1 + 0.994646990740736*G0_1_0 - 0.286337770061727*G0_1_1;
    A[159] = 0.286337770061727*G0_0_0 - 0.579134286816574*G0_0_1 - 0.579134286816577*G0_1_0 - 0.0495170579806004*G0_1_1;
    A[160] = -0.359536899250438*G0_0_0 + 0.303561094576718*G0_0_1 + 0.303561094576719*G0_1_0 + 0.071046213624341*G0_1_1;
    A[161] = 0.198068231922398*G0_0_0 - 0.0710462136243348*G0_0_1 - 0.0710462136243394*G0_1_0;
    A[162] = -2.82031938932979*G0_0_0 - 1.15826857363315*G0_0_1 - 1.15826857363315*G0_1_0 + 0.503782242063496*G0_1_1;
    A[163] = 1.35633680555555*G0_0_0 + 0.783661265432095*G0_0_1 + 0.783661265432095*G0_1_0 + 0.210985725308639*G0_1_1;
    A[164] = -0.667403824955902*G0_0_0 - 0.404748126102294*G0_0_1 - 0.40474812610229*G0_1_0 - 0.142092427248678*G0_1_1;
    A[165] = 1.19486813822751*G0_0_0 + 0.622192598104054*G0_0_1 + 0.622192598104051*G0_1_0 + 0.0495170579805931*G0_1_1;
    A[166] = -0.41981853505291*G0_0_0 - 0.34661940586419*G0_0_1 - 0.346619405864201*G0_1_0 - 0.273420276675482*G0_1_1;
    A[167] = -0.99034115961198*G0_0_0 - 0.727685460758374*G0_0_1 - 0.727685460758362*G0_1_0 - 0.465029761904754*G0_1_1;
    A[168] = -0.0158454585537924*G0_0_0 - 0.0158454585537927*G0_0_1 + 0.594204695767193*G0_1_0 + 0.594204695767194*G0_1_1;
    A[169] = -0.0379774305555558*G0_0_0;
    A[170] = -0.380291005291005*G0_0_1 - 0.449959352954144*G0_1_1;
    A[171] = 0.131327849426809*G0_0_0 + 0.0301408179012343*G0_0_1 + 0.0301408179012383*G0_1_0;
    A[172] = -0.297102347883601*G0_0_0 - 0.1485511739418*G0_0_1 - 0.148551173941804*G0_1_0 - 0.0172233245149933*G0_1_1;
    A[173] = -0.219597387566127*G0_0_0 - 0.157162836199288*G0_0_1 - 0.15716283619928*G0_1_0 - 0.111951609347434*G0_1_1;
    A[174] = -0.895612874779543*G0_0_0 - 0.663097993827159*G0_0_1 - 0.66309799382716*G0_1_0 - 0.359536899250436*G0_1_1;
    A[175] = -0.906377452601405*G0_0_0 - 0.376760223765427*G0_0_1 - 1.70295621141974*G0_1_0 - 2.56842826829805*G0_1_1;
    A[176] = 3.07436342592591*G0_0_0 + 1.89887152777776*G0_0_1 + 1.89887152777776*G0_1_0 + 4.41778273809521*G0_1_1;
    A[177] = -1.80414324294532*G0_0_0 - 2.50384080136683*G0_0_1 - 1.45321800595237*G0_1_0 - 3.9570588073192*G0_1_1;
    A[178] = 0.895612874779544*G0_0_0 + 1.37786596119929*G0_0_1 + 0.66309799382716*G0_1_0 + 1.96345899470899*G0_1_1;
    A[179] = -0.0495170579805968*G0_0_0 - 0.579134286816576*G0_0_1 - 0.579134286816576*G0_1_0 + 0.286337770061727*G0_1_1;
    A[180] = 0.103339947089945*G0_0_0 - 0.0301408179012349*G0_0_1 - 0.0301408179012333*G0_1_0 + 0.103339947089947*G0_1_1;
    A[181] = -0.111951609347442*G0_0_0 + 0.0452112268518494*G0_0_1 + 0.0452112268518498*G0_1_0 - 0.0172233245149945*G0_1_1;
    A[182] = 0.111951609347443*G0_0_0 - 0.0301408179012337*G0_0_1 - 0.0301408179012329*G0_1_0;
    A[183] = 0.731991291887121*G0_0_0 + 2.04096395502645*G0_0_1 + 2.04096395502644*G0_1_0 - 0.61142802028219*G0_1_1;
    A[184] = 0.387524801587297*G0_0_0 - 0.47148850859788*G0_0_1 - 0.471488508597882*G0_1_0 - 0.318631503527333*G0_1_1;
    A[185] = -0.344466490299821*G0_0_0 + 0.10333994708995*G0_0_1 + 0.103339947089945*G0_1_0 + 0.0344466490299839*G0_1_1;
    A[186] = -3.81066054894178*G0_0_0 - 2.40911251653439*G0_0_1 - 2.40911251653438*G0_1_0 + 0.00430583112875346*G0_1_1;
    A[187] = 1.03339947089947*G0_0_0 + 0.658792162698403*G0_0_1 + 0.658792162698416*G0_1_0 + 0.327243165784826*G0_1_1;
    A[188] = 2.02374063051144*G0_0_0 + 1.61038084215167*G0_0_1 + 1.61038084215165*G0_1_0 + 0.680321318342142*G0_1_1;
    A[189] = -0.0696683476631389*G0_0_0 - 0.0696683476631386*G0_0_1 - 0.449959352954143*G0_1_0 - 0.449959352954143*G0_1_1;
    A[190] = -0.0379774305555547*G0_0_0;
    A[191] = 0.610050154320988*G0_0_1 + 0.594204695767195*G0_1_1;
    A[192] = 0.172233245149907*G0_0_0 + 0.0301408179012336*G0_0_1 + 0.0301408179012304*G0_1_0;
    A[193] = -0.219597387566131*G0_0_0 - 0.0624345513668434*G0_0_1 - 0.0624345513668362*G0_1_0 - 0.0172233245149894*G0_1_1;
    A[194] = 0.266961529982348*G0_0_0 + 0.133480764991176*G0_0_1 + 0.133480764991167*G0_1_0 + 0.103339947089939*G0_1_1;
    A[195] = 1.39508928571429*G0_0_0 + 0.865472056878304*G0_0_1 + 0.865472056878307*G0_1_0 + 0.286337770061725*G0_1_1;
    A[196] = 0.818107914462077*G0_0_0 + 0.585593033509694*G0_0_1 + 1.30036100088183*G0_1_0 + 1.96345899470898*G0_1_1;
    A[197] = -1.80414324294532*G0_0_0 - 1.45321800595237*G0_0_1 - 2.50384080136683*G0_1_0 - 3.9570588073192*G0_1_1;
    A[198] = 3.6944031084656*G0_0_0 + 2.51891121031745*G0_0_1 + 2.51891121031745*G0_1_0 + 4.41778273809522*G0_1_1;
    A[199] = -1.39508928571429*G0_0_0 - 2.19166804453262*G0_0_1 - 0.865472056878308*G0_1_0 - 2.56842826829805*G0_1_1;
    A[200] = 0.0710462136243367*G0_0_0 + 0.30356109457672*G0_0_1 + 0.303561094576718*G0_1_0 - 0.359536899250438*G0_1_1;
    A[201] = -0.0172233245149905*G0_0_0 + 0.0452112268518537*G0_0_1 + 0.0452112268518508*G0_1_0 - 0.111951609347443*G0_1_1;
    A[202] = -0.01722332451499*G0_0_0 + 0.131327849426809*G0_0_1 + 0.131327849426809*G0_1_0 - 0.0172233245149875*G0_1_1;
    A[203] = 0.0710462136243367*G0_0_0 - 0.0301408179012345*G0_0_1 - 0.0301408179012361*G0_1_0;
    A[204] = -0.51669973544973*G0_0_0 - 0.930059523809525*G0_0_1 - 0.930059523809516*G0_1_0 + 0.680321318342152*G0_1_1;
    A[205] = 0.0430583112874771*G0_0_0 - 0.331548996913581*G0_0_1 - 0.331548996913578*G0_1_0 + 0.32724316578483*G0_1_1;
    A[206] = -0.516699735449731*G0_0_0 - 0.0688932980599645*G0_0_1 - 0.0688932980599645*G0_1_0 + 0.0344466490299805*G0_1_1;
    A[207] = 1.01187031525572*G0_0_0 + 2.41341834766314*G0_0_1 + 2.41341834766312*G0_1_0 + 0.00430583112874522*G0_1_1;
    A[208] = 1.01187031525572*G0_0_0 + 0.15285700507055*G0_0_1 + 0.152857005070539*G0_1_0 - 0.318631503527332*G0_1_1;
    A[209] = -3.96136463844794*G0_0_0 - 2.65239197530863*G0_0_1 - 2.65239197530861*G0_1_0 - 0.611428020282181*G0_1_1;
    A[210] = 0.0408192791005288*G0_0_0 + 0.0408192791005289*G0_0_1 + 0.202374063051146*G0_1_0 + 0.202374063051146*G0_1_1;
    A[211] = -0.0408192791005279*G0_0_0;
    A[212] = -0.850315531305113*G0_0_1 - 0.648027584876543*G0_1_1;
    A[213] = 0.340160659171073*G0_0_0 + 0.07104621362434*G0_0_1 + 0.071046213624341*G0_1_0;
    A[214] = -0.895612874779541*G0_0_0 - 0.232514880952386*G0_0_1 - 0.232514880952385*G0_1_0 + 0.071046213624336*G0_1_1;
    A[215] = 1.39508928571428*G0_0_0 + 0.52961722883598*G0_0_1 + 0.529617228835985*G0_1_0 - 0.0495170579805948*G0_1_1;
    A[216] = -2.56196952160493*G0_0_0 - 1.28098476080247*G0_0_1 - 1.28098476080247*G0_1_0 - 0.286337770061727*G0_1_1;
    A[217] = -0.340160659171077*G0_0_0 - 0.269114445546736*G0_0_1 - 0.66955674052028*G0_1_0 - 0.938671186067017*G0_1_1;
    A[218] = 0.895612874779544*G0_0_0 + 0.66309799382716*G0_0_1 + 1.37786596119929*G0_1_0 + 1.96345899470899*G0_1_1;
    A[219] = -1.39508928571429*G0_0_0 - 0.865472056878308*G0_0_1 - 2.19166804453262*G0_1_0 - 2.56842826829805*G0_1_1;
    A[220] = 2.56196952160493*G0_0_0 + 1.28098476080247*G0_0_1 + 1.28098476080247*G0_1_0 + 1.98929398148148*G0_1_1;
    A[221] = -0.071046213624339*G0_0_1 - 0.0710462136243381*G0_1_0 + 0.198068231922397*G0_1_1;
    A[222] = -0.0301408179012367*G0_0_1 - 0.0301408179012346*G0_1_0 + 0.111951609347442*G0_1_1;
    A[223] = -0.0301408179012353*G0_0_1 - 0.0301408179012351*G0_1_0 + 0.0710462136243365*G0_1_1;
    A[224] = -0.0710462136243394*G0_0_1 - 0.071046213624338*G0_1_0;
    A[225] = 0.262655698853621*G0_0_1 + 0.262655698853613*G0_1_0 - 0.46502976190476*G0_1_1;
    A[226] = 0.0731991291887157*G0_0_1 + 0.0731991291887126*G0_1_0 - 0.273420276675482*G0_1_1;
    A[227] = 0.262655698853619*G0_0_1 + 0.262655698853614*G0_1_0 - 0.142092427248675*G0_1_1;
    A[228] = -0.572675540123463*G0_0_1 - 0.572675540123454*G0_1_0 + 0.0495170579805986*G0_1_1;
    A[229] = -0.572675540123456*G0_0_1 - 0.57267554012345*G0_1_0 + 0.210985725308639*G0_1_1;
    A[230] = 1.66205081569665*G0_0_1 + 1.66205081569664*G0_1_0 + 0.503782242063491*G0_1_1;
    A[231] = -0.64802758487654*G0_0_0 - 0.648027584876541*G0_0_1 + 0.202287946428571*G0_1_0 + 0.202287946428571*G0_1_1;
    A[232] = 0.202374063051145*G0_0_0 + 0.161554783950616*G0_1_0;
    A[233] = -0.0408192791005286*G0_1_1;
    A[234] = 0.198068231922394*G0_0_0 + 0.269114445546734*G0_0_1 + 0.269114445546733*G0_1_0 + 0.340160659171071*G0_1_1;
    A[235] = 0.111951609347444*G0_0_0 + 0.142092427248676*G0_0_1 + 0.142092427248675*G0_1_0 + 0.17223324514991*G0_1_1;
    A[236] = 0.0710462136243344*G0_0_0 + 0.101187031525571*G0_0_1 + 0.101187031525572*G0_1_0 + 0.131327849426805*G0_1_1;
    A[237] = 0.0710462136243364*G0_0_1 + 0.071046213624339*G0_1_0 + 0.142092427248677*G0_1_1;
    A[238] = -0.286337770061727*G0_0_0 + 0.994646990740736*G0_0_1 + 0.994646990740736*G0_1_0 - 0.286337770061727*G0_1_1;
    A[239] = -0.0495170579805968*G0_0_0 - 0.579134286816576*G0_0_1 - 0.579134286816576*G0_1_0 + 0.286337770061727*G0_1_1;
    A[240] = 0.0710462136243367*G0_0_0 + 0.303561094576718*G0_0_1 + 0.30356109457672*G0_1_0 - 0.359536899250438*G0_1_1;
    A[241] = -0.0710462136243381*G0_0_1 - 0.071046213624339*G0_1_0 + 0.198068231922397*G0_1_1;
    A[242] = 1.98929398148147*G0_0_0 + 0.708309220679008*G0_0_1 + 0.708309220679008*G0_1_0 + 1.98929398148147*G0_1_1;
    A[243] = -2.56842826829805*G0_0_0 - 0.376760223765428*G0_0_1 - 1.70295621141974*G0_1_0 - 0.906377452601403*G0_1_1;
    A[244] = 1.96345899470898*G0_0_0 + 0.585593033509697*G0_0_1 + 1.30036100088183*G0_1_0 + 0.818107914462074*G0_1_1;
    A[245] = -0.938671186067015*G0_0_0 - 0.269114445546735*G0_0_1 - 0.669556740520278*G0_1_0 - 0.340160659171071*G0_1_1;
    A[246] = 0.503782242063493*G0_0_0 - 1.15826857363315*G0_0_1 - 1.15826857363315*G0_1_0 - 2.82031938932979*G0_1_1;
    A[247] = 0.0495170579805932*G0_0_0 + 0.622192598104046*G0_0_1 + 0.622192598104046*G0_1_0 + 1.1948681382275*G0_1_1;
    A[248] = -0.465029761904754*G0_0_0 - 0.72768546075837*G0_0_1 - 0.727685460758368*G0_1_0 - 0.990341159611985*G0_1_1;
    A[249] = 0.210985725308639*G0_0_0 + 0.783661265432093*G0_0_1 + 0.783661265432095*G0_1_0 + 1.35633680555555*G0_1_1;
    A[250] = -0.273420276675486*G0_0_0 - 0.346619405864193*G0_0_1 - 0.346619405864193*G0_1_0 - 0.419818535052903*G0_1_1;
    A[251] = -0.142092427248672*G0_0_0 - 0.404748126102288*G0_0_1 - 0.404748126102292*G0_1_0 - 0.667403824955907*G0_1_1;
    A[252] = 0.594204695767193*G0_0_0 + 0.594204695767193*G0_0_1 - 0.0158454585537918*G0_1_0 - 0.0158454585537916*G0_1_1;
    A[253] = -0.449959352954141*G0_0_0 - 0.380291005291001*G0_1_0;
    A[254] = -0.0379774305555548*G0_1_1;
    A[255] = -0.359536899250434*G0_0_0 - 0.663097993827153*G0_0_1 - 0.663097993827153*G0_1_0 - 0.895612874779528*G0_1_1;
    A[256] = -0.111951609347443*G0_0_0 - 0.157162836199291*G0_0_1 - 0.15716283619929*G0_1_0 - 0.219597387566136*G0_1_1;
    A[257] = -0.0172233245149891*G0_0_0 - 0.148551173941797*G0_0_1 - 0.148551173941799*G0_1_0 - 0.297102347883594*G0_1_1;
    A[258] = 0.0301408179012364*G0_0_1 + 0.0301408179012363*G0_1_0 + 0.131327849426808*G0_1_1;
    A[259] = 0.286337770061727*G0_0_0 - 0.579134286816577*G0_0_1 - 0.579134286816574*G0_1_0 - 0.0495170579806004*G0_1_1;
    A[260] = 0.103339947089945*G0_0_0 - 0.0301408179012335*G0_0_1 - 0.0301408179012349*G0_1_0 + 0.103339947089947*G0_1_1;
    A[261] = -0.0172233245149905*G0_0_0 + 0.0452112268518509*G0_0_1 + 0.0452112268518537*G0_1_0 - 0.111951609347443*G0_1_1;
    A[262] = -0.0301408179012346*G0_0_1 - 0.0301408179012367*G0_1_0 + 0.111951609347442*G0_1_1;
    A[263] = -2.56842826829805*G0_0_0 - 1.70295621141974*G0_0_1 - 0.376760223765428*G0_1_0 - 0.906377452601403*G0_1_1;
    A[264] = 4.41778273809521*G0_0_0 + 1.89887152777776*G0_0_1 + 1.89887152777776*G0_1_0 + 3.0743634259259*G0_1_1;
    A[265] = -3.9570588073192*G0_0_0 - 1.45321800595237*G0_0_1 - 2.50384080136682*G0_1_0 - 1.8041432429453*G0_1_1;
    A[266] = 1.96345899470898*G0_0_0 + 0.663097993827154*G0_0_1 + 1.37786596119928*G0_1_0 + 0.895612874779529*G0_1_1;
    A[267] = -0.611428020282189*G0_0_0 + 2.04096395502644*G0_0_1 + 2.04096395502644*G0_1_0 + 0.731991291887118*G0_1_1;
    A[268] = 0.00430583112875835*G0_0_0 - 2.40911251653437*G0_0_1 - 2.40911251653437*G0_1_0 - 3.81066054894177*G0_1_1;
    A[269] = 0.680321318342139*G0_0_0 + 1.61038084215166*G0_0_1 + 1.61038084215166*G0_1_0 + 2.02374063051144*G0_1_1;
    A[270] = -0.318631503527333*G0_0_0 - 0.47148850859788*G0_0_1 - 0.47148850859788*G0_1_0 + 0.387524801587305*G0_1_1;
    A[271] = 0.32724316578483*G0_0_0 + 0.658792162698406*G0_0_1 + 0.658792162698403*G0_1_0 + 1.03339947089946*G0_1_1;
    A[272] = 0.0344466490299811*G0_0_0 + 0.103339947089945*G0_0_1 + 0.103339947089946*G0_1_0 - 0.344466490299825*G0_1_1;
    A[273] = -0.449959352954142*G0_0_0 - 0.449959352954142*G0_0_1 - 0.06966834766314*G0_1_0 - 0.0696683476631397*G0_1_1;
    A[274] = 0.594204695767192*G0_0_0 + 0.610050154320982*G0_1_0;
    A[275] = -0.0379774305555547*G0_1_1;
    A[276] = 0.286337770061721*G0_0_0 + 0.865472056878298*G0_0_1 + 0.865472056878297*G0_1_0 + 1.39508928571427*G0_1_1;
    A[277] = 0.103339947089946*G0_0_0 + 0.133480764991178*G0_0_1 + 0.133480764991181*G0_1_0 + 0.266961529982364*G0_1_1;
    A[278] = -0.0172233245149933*G0_0_0 - 0.0624345513668442*G0_0_1 - 0.0624345513668466*G0_1_0 - 0.219597387566141*G0_1_1;
    A[279] = 0.0301408179012323*G0_0_1 + 0.0301408179012354*G0_1_0 + 0.172233245149911*G0_1_1;
    A[280] = -0.359536899250438*G0_0_0 + 0.303561094576719*G0_0_1 + 0.303561094576718*G0_1_0 + 0.071046213624341*G0_1_1;
    A[281] = -0.111951609347442*G0_0_0 + 0.0452112268518498*G0_0_1 + 0.0452112268518494*G0_1_0 - 0.0172233245149945*G0_1_1;
    A[282] = -0.01722332451499*G0_0_0 + 0.131327849426809*G0_0_1 + 0.131327849426809*G0_1_0 - 0.0172233245149875*G0_1_1;
    A[283] = -0.0301408179012351*G0_0_1 - 0.0301408179012353*G0_1_0 + 0.0710462136243365*G0_1_1;
    A[284] = 1.96345899470898*G0_0_0 + 1.30036100088183*G0_0_1 + 0.585593033509697*G0_1_0 + 0.818107914462074*G0_1_1;
    A[285] = -3.9570588073192*G0_0_0 - 2.50384080136682*G0_0_1 - 1.45321800595237*G0_1_0 - 1.8041432429453*G0_1_1;
    A[286] = 4.41778273809521*G0_0_0 + 2.51891121031744*G0_0_1 + 2.51891121031744*G0_1_0 + 3.69440310846558*G0_1_1;
    A[287] = -2.56842826829805*G0_0_0 - 0.865472056878299*G0_0_1 - 2.19166804453261*G0_1_0 - 1.39508928571427*G0_1_1;
    A[288] = 0.680321318342154*G0_0_0 - 0.930059523809515*G0_0_1 - 0.930059523809511*G0_1_0 - 0.516699735449728*G0_1_1;
    A[289] = 0.00430583112873437*G0_0_0 + 2.41341834766311*G0_0_1 + 2.41341834766311*G0_1_0 + 1.01187031525571*G0_1_1;
    A[290] = -0.611428020282172*G0_0_0 - 2.65239197530862*G0_0_1 - 2.65239197530861*G0_1_0 - 3.96136463844794*G0_1_1;
    A[291] = 0.327243165784831*G0_0_0 - 0.33154899691358*G0_0_1 - 0.331548996913575*G0_1_0 + 0.0430583112874761*G0_1_1;
    A[292] = -0.318631503527334*G0_0_0 + 0.152857005070551*G0_0_1 + 0.152857005070546*G0_1_0 + 1.01187031525573*G0_1_1;
    A[293] = 0.0344466490299819*G0_0_0 - 0.0688932980599645*G0_0_1 - 0.0688932980599634*G0_1_0 - 0.516699735449734*G0_1_1;
    A[294] = 0.202374063051146*G0_0_0 + 0.202374063051146*G0_0_1 + 0.0408192791005294*G0_1_0 + 0.0408192791005293*G0_1_1;
    A[295] = -0.64802758487654*G0_0_0 - 0.85031553130511*G0_1_0;
    A[296] = -0.0408192791005284*G0_1_1;
    A[297] = -0.286337770061723*G0_0_0 - 1.28098476080246*G0_0_1 - 1.28098476080246*G0_1_0 - 2.56196952160492*G0_1_1;
    A[298] = -0.0495170579805991*G0_0_0 + 0.52961722883598*G0_0_1 + 0.529617228835978*G0_1_0 + 1.39508928571428*G0_1_1;
    A[299] = 0.0710462136243394*G0_0_0 - 0.23251488095238*G0_0_1 - 0.232514880952382*G0_1_0 - 0.895612874779538*G0_1_1;
    A[300] = 0.0710462136243401*G0_0_1 + 0.0710462136243395*G0_1_0 + 0.340160659171075*G0_1_1;
    A[301] = 0.198068231922398*G0_0_0 - 0.0710462136243394*G0_0_1 - 0.0710462136243348*G0_1_0;
    A[302] = 0.111951609347443*G0_0_0 - 0.0301408179012329*G0_0_1 - 0.0301408179012337*G0_1_0;
    A[303] = 0.0710462136243367*G0_0_0 - 0.0301408179012362*G0_0_1 - 0.0301408179012345*G0_1_0;
    A[304] = -0.071046213624338*G0_0_1 - 0.0710462136243394*G0_1_0;
    A[305] = -0.938671186067015*G0_0_0 - 0.669556740520278*G0_0_1 - 0.269114445546735*G0_1_0 - 0.340160659171071*G0_1_1;
    A[306] = 1.96345899470898*G0_0_0 + 1.37786596119928*G0_0_1 + 0.663097993827154*G0_1_0 + 0.895612874779529*G0_1_1;
    A[307] = -2.56842826829805*G0_0_0 - 2.19166804453261*G0_0_1 - 0.865472056878299*G0_1_0 - 1.39508928571427*G0_1_1;
    A[308] = 1.98929398148147*G0_0_0 + 1.28098476080246*G0_0_1 + 1.28098476080246*G0_1_0 + 2.56196952160492*G0_1_1;
    A[309] = -0.465029761904765*G0_0_0 + 0.262655698853612*G0_0_1 + 0.262655698853606*G0_1_0;
    A[310] = 0.0495170579806097*G0_0_0 - 0.572675540123444*G0_0_1 - 0.572675540123445*G0_1_0;
    A[311] = 0.50378224206348*G0_0_0 + 1.66205081569663*G0_0_1 + 1.66205081569663*G0_1_0;
    A[312] = -0.273420276675487*G0_0_0 + 0.0731991291887116*G0_0_1 + 0.0731991291887117*G0_1_0;
    A[313] = 0.210985725308642*G0_0_0 - 0.572675540123458*G0_0_1 - 0.572675540123457*G0_1_0;
    A[314] = -0.142092427248675*G0_0_0 + 0.262655698853616*G0_0_1 + 0.262655698853617*G0_1_0;
    A[315] = -0.215291556437389*G0_0_0 - 0.215291556437389*G0_0_1 - 0.215291556437391*G0_1_0 - 0.215291556437392*G0_1_1;
    A[316] = 0.107645778218697*G0_0_0;
    A[317] = 0.107645778218693*G0_1_1;
    A[318] = -0.667403824955902*G0_0_0 - 0.262655698853606*G0_0_1 - 0.262655698853614*G0_1_0;
    A[319] = -0.344466490299821*G0_0_0 - 0.447806437389773*G0_0_1 - 0.447806437389769*G0_1_0 - 0.516699735449737*G0_1_1;
    A[320] = -0.516699735449725*G0_0_0 - 0.447806437389759*G0_0_1 - 0.447806437389767*G0_1_0 - 0.344466490299818*G0_1_1;
    A[321] = -0.262655698853616*G0_0_1 - 0.262655698853621*G0_1_0 - 0.667403824955912*G0_1_1;
    A[322] = -2.82031938932979*G0_0_0 - 1.15826857363315*G0_0_1 - 1.15826857363315*G0_1_0 + 0.503782242063496*G0_1_1;
    A[323] = 0.731991291887121*G0_0_0 + 2.04096395502644*G0_0_1 + 2.04096395502645*G0_1_0 - 0.61142802028219*G0_1_1;
    A[324] = -0.51669973544973*G0_0_0 - 0.930059523809516*G0_0_1 - 0.930059523809525*G0_1_0 + 0.680321318342152*G0_1_1;
    A[325] = 0.262655698853613*G0_0_1 + 0.262655698853621*G0_1_0 - 0.465029761904761*G0_1_1;
    A[326] = 0.503782242063493*G0_0_0 - 1.15826857363315*G0_0_1 - 1.15826857363315*G0_1_0 - 2.82031938932979*G0_1_1;
    A[327] = -0.611428020282189*G0_0_0 + 2.04096395502644*G0_0_1 + 2.04096395502644*G0_1_0 + 0.731991291887118*G0_1_1;
    A[328] = 0.680321318342154*G0_0_0 - 0.930059523809511*G0_0_1 - 0.930059523809515*G0_1_0 - 0.516699735449728*G0_1_1;
    A[329] = -0.465029761904765*G0_0_0 + 0.262655698853606*G0_0_1 + 0.262655698853612*G0_1_0;
    A[330] = 7.06156305114635*G0_0_0 + 3.1001984126984*G0_0_1 + 3.1001984126984*G0_1_0 + 7.06156305114636*G0_1_1;
    A[331] = -6.32957175925922*G0_0_0 - 3.05714010141091*G0_0_1 - 3.05714010141092*G0_1_0 - 1.80844907407406*G0_1_1;
    A[332] = 2.75573192239857*G0_0_0 + 1.37786596119929*G0_0_1 + 1.37786596119928*G0_1_0 + 1.03339947089947*G0_1_1;
    A[333] = -1.80844907407406*G0_0_0 - 3.05714010141092*G0_0_1 - 3.05714010141092*G0_1_0 - 6.32957175925925*G0_1_1;
    A[334] = 1.42092427248676*G0_0_0 + 1.46398258377423*G0_0_1 + 1.46398258377424*G0_1_0 + 1.42092427248676*G0_1_1;
    A[335] = 1.03339947089945*G0_0_0 + 1.37786596119929*G0_0_1 + 1.37786596119929*G0_1_0 + 2.75573192239859*G0_1_1;
    A[336] = -0.053822889109347*G0_0_0 - 0.0538228891093473*G0_0_1 - 0.0538228891093451*G0_1_0 - 0.0538228891093456*G0_1_1;
    A[337] = -0.0538228891093511*G0_0_0;
    A[338] = 0.107645778218693*G0_1_1;
    A[339] = 1.35633680555555*G0_0_0 + 0.572675540123444*G0_0_1 + 0.572675540123455*G0_1_0;
    A[340] = 0.3875248015873*G0_0_0 + 0.859013310185189*G0_0_1 + 0.859013310185176*G0_1_0 + 1.01187031525573*G0_1_1;
    A[341] = 0.0430583112874762*G0_0_0 + 0.37460730820105*G0_0_1 + 0.374607308201063*G0_1_0 + 1.03339947089946*G0_1_1;
    A[342] = -0.0731991291887087*G0_0_1 - 0.0731991291887149*G0_1_0 - 0.419818535052907*G0_1_1;
    A[343] = 1.35633680555555*G0_0_0 + 0.783661265432095*G0_0_1 + 0.783661265432095*G0_1_0 + 0.210985725308639*G0_1_1;
    A[344] = 0.387524801587297*G0_0_0 - 0.471488508597882*G0_0_1 - 0.47148850859788*G0_1_0 - 0.318631503527333*G0_1_1;
    A[345] = 0.043058311287477*G0_0_0 - 0.331548996913578*G0_0_1 - 0.331548996913581*G0_1_0 + 0.32724316578483*G0_1_1;
    A[346] = 0.0731991291887125*G0_0_1 + 0.0731991291887156*G0_1_0 - 0.273420276675482*G0_1_1;
    A[347] = 0.0495170579805934*G0_0_0 + 0.622192598104046*G0_0_1 + 0.622192598104045*G0_1_0 + 1.1948681382275*G0_1_1;
    A[348] = 0.00430583112875779*G0_0_0 - 2.40911251653437*G0_0_1 - 2.40911251653437*G0_1_0 - 3.81066054894177*G0_1_1;
    A[349] = 0.00430583112873438*G0_0_0 + 2.41341834766311*G0_0_1 + 2.41341834766311*G0_1_0 + 1.01187031525571*G0_1_1;
    A[350] = 0.0495170579806097*G0_0_0 - 0.572675540123445*G0_0_1 - 0.572675540123444*G0_1_0;
    A[351] = -6.32957175925922*G0_0_0 - 3.05714010141092*G0_0_1 - 3.05714010141091*G0_1_0 - 1.80844907407406*G0_1_1;
    A[352] = 9.94646990740735*G0_0_0 + 4.97323495370367*G0_0_1 + 4.97323495370367*G0_1_0 + 8.65472056878303*G0_1_1;
    A[353] = -6.32957175925922*G0_0_0 - 3.2724316578483*G0_0_1 - 3.2724316578483*G0_1_0 - 2.02374063051144*G0_1_1;
    A[354] = -0.387524801587295*G0_0_0 + 2.55120494378306*G0_0_1 + 2.55120494378306*G0_1_0 - 0.387524801587306*G0_1_1;
    A[355] = -0.387524801587299*G0_0_0 - 2.93872974537035*G0_0_1 - 2.93872974537035*G0_1_0 - 5.87745949074072*G0_1_1;
    A[356] = -0.0861166225749538*G0_0_0 - 0.0430583112874794*G0_0_1 - 0.0430583112874826*G0_1_0 + 1.42092427248677*G0_1_1;
    A[357] = 0.107645778218694*G0_0_0 + 0.107645778218694*G0_0_1 + 0.107645778218694*G0_1_0 + 0.107645778218694*G0_1_1;
    A[358] = -0.215291556437386*G0_0_0;
    A[359] = 0.107645778218693*G0_1_1;
    A[360] = -2.82031938932979*G0_0_0 - 1.66205081569663*G0_0_1 - 1.66205081569664*G0_1_0;
    A[361] = 0.731991291887123*G0_0_0 - 1.30897266313933*G0_0_1 - 1.30897266313933*G0_1_0 - 3.96136463844797*G0_1_1;
    A[362] = -0.516699735449733*G0_0_0 + 0.413359788359792*G0_0_1 + 0.413359788359796*G0_1_0 + 2.02374063051147*G0_1_1;
    A[363] = -0.262655698853618*G0_0_1 - 0.262655698853619*G0_1_0 - 0.990341159611993*G0_1_1;
    A[364] = -0.667403824955902*G0_0_0 - 0.40474812610229*G0_0_1 - 0.404748126102294*G0_1_0 - 0.142092427248678*G0_1_1;
    A[365] = -0.344466490299821*G0_0_0 + 0.103339947089945*G0_0_1 + 0.10333994708995*G0_1_0 + 0.034446649029984*G0_1_1;
    A[366] = -0.516699735449731*G0_0_0 - 0.0688932980599644*G0_0_1 - 0.0688932980599646*G0_1_0 + 0.0344466490299806*G0_1_1;
    A[367] = 0.262655698853614*G0_0_1 + 0.262655698853619*G0_1_0 - 0.142092427248675*G0_1_1;
    A[368] = -0.465029761904754*G0_0_0 - 0.727685460758368*G0_0_1 - 0.72768546075837*G0_1_0 - 0.990341159611985*G0_1_1;
    A[369] = 0.68032131834214*G0_0_0 + 1.61038084215166*G0_0_1 + 1.61038084215166*G0_1_0 + 2.02374063051144*G0_1_1;
    A[370] = -0.611428020282172*G0_0_0 - 2.65239197530862*G0_0_1 - 2.65239197530862*G0_1_0 - 3.96136463844794*G0_1_1;
    A[371] = 0.503782242063481*G0_0_0 + 1.66205081569663*G0_0_1 + 1.66205081569663*G0_1_0;
    A[372] = 2.75573192239857*G0_0_0 + 1.37786596119928*G0_0_1 + 1.37786596119929*G0_1_0 + 1.03339947089947*G0_1_1;
    A[373] = -6.32957175925922*G0_0_0 - 3.2724316578483*G0_0_1 - 3.2724316578483*G0_1_0 - 2.02374063051144*G0_1_1;
    A[374] = 7.06156305114635*G0_0_0 + 3.96136463844795*G0_0_1 + 3.96136463844795*G0_1_0 + 7.92272927689591*G0_1_1;
    A[375] = 1.42092427248676*G0_0_0 - 0.0430583112874737*G0_0_1 - 0.0430583112874843*G0_1_0 - 0.0861166225749604*G0_1_1;
    A[376] = -1.80844907407407*G0_0_0 + 1.24869102733685*G0_0_1 + 1.24869102733686*G0_1_0 - 2.02374063051146*G0_1_1;
    A[377] = 1.03339947089947*G0_0_0 - 0.344466490299823*G0_0_1 - 0.344466490299831*G0_1_0 + 1.03339947089947*G0_1_1;
    A[378] = -0.053822889109347*G0_0_0 - 0.0538228891093471*G0_0_1 - 0.0538228891093465*G0_1_0 - 0.0538228891093456*G0_1_1;
    A[379] = 0.107645778218695*G0_0_0;
    A[380] = -0.0538228891093453*G0_1_1;
    A[381] = -0.41981853505291*G0_0_0 - 0.0731991291887122*G0_0_1 - 0.0731991291887149*G0_1_0;
    A[382] = 1.03339947089947*G0_0_0 + 0.374607308201059*G0_0_1 + 0.374607308201062*G0_1_0 + 0.0430583112874812*G0_1_1;
    A[383] = 1.01187031525571*G0_0_0 + 0.859013310185173*G0_0_1 + 0.859013310185171*G0_1_0 + 0.387524801587293*G0_1_1;
    A[384] = 0.572675540123455*G0_0_1 + 0.572675540123464*G0_1_0 + 1.35633680555556*G0_1_1;
    A[385] = 1.19486813822751*G0_0_0 + 0.622192598104051*G0_0_1 + 0.622192598104053*G0_1_0 + 0.0495170579805931*G0_1_1;
    A[386] = -3.81066054894178*G0_0_0 - 2.40911251653438*G0_0_1 - 2.40911251653439*G0_1_0 + 0.00430583112875346*G0_1_1;
    A[387] = 1.01187031525573*G0_0_0 + 2.41341834766312*G0_0_1 + 2.41341834766314*G0_1_0 + 0.00430583112874522*G0_1_1;
    A[388] = -0.572675540123454*G0_0_1 - 0.572675540123463*G0_1_0 + 0.0495170579805986*G0_1_1;
    A[389] = 0.210985725308639*G0_0_0 + 0.783661265432095*G0_0_1 + 0.783661265432093*G0_1_0 + 1.35633680555555*G0_1_1;
    A[390] = -0.318631503527333*G0_0_0 - 0.47148850859788*G0_0_1 - 0.47148850859788*G0_1_0 + 0.387524801587304*G0_1_1;
    A[391] = 0.327243165784831*G0_0_0 - 0.331548996913575*G0_0_1 - 0.33154899691358*G0_1_0 + 0.0430583112874762*G0_1_1;
    A[392] = -0.273420276675487*G0_0_0 + 0.0731991291887117*G0_0_1 + 0.0731991291887117*G0_1_0;
    A[393] = -1.80844907407406*G0_0_0 - 3.05714010141092*G0_0_1 - 3.05714010141092*G0_1_0 - 6.32957175925925*G0_1_1;
    A[394] = -0.387524801587295*G0_0_0 + 2.55120494378306*G0_0_1 + 2.55120494378306*G0_1_0 - 0.387524801587306*G0_1_1;
    A[395] = 1.42092427248676*G0_0_0 - 0.0430583112874843*G0_0_1 - 0.0430583112874737*G0_1_0 - 0.0861166225749604*G0_1_1;
    A[396] = 8.65472056878303*G0_0_0 + 4.97323495370369*G0_0_1 + 4.97323495370369*G0_1_0 + 9.94646990740739*G0_1_1;
    A[397] = -5.87745949074072*G0_0_0 - 2.93872974537035*G0_0_1 - 2.93872974537036*G0_1_0 - 0.387524801587288*G0_1_1;
    A[398] = -2.02374063051144*G0_0_0 - 3.27243165784831*G0_0_1 - 3.27243165784831*G0_1_0 - 6.32957175925925*G0_1_1;
    A[399] = 0.107645778218696*G0_0_0 + 0.107645778218696*G0_0_1 + 0.107645778218694*G0_1_0 + 0.107645778218695*G0_1_1;
    A[400] = -0.0538228891093459*G0_0_0;
    A[401] = -0.0538228891093468*G0_1_1;
    A[402] = 1.19486813822751*G0_0_0 + 0.572675540123457*G0_0_1 + 0.572675540123454*G0_1_0;
    A[403] = -3.81066054894178*G0_0_0 - 1.40154803240741*G0_0_1 - 1.4015480324074*G0_1_0 + 1.01187031525573*G0_1_1;
    A[404] = 1.01187031525574*G0_0_0 - 1.40154803240739*G0_0_1 - 1.40154803240741*G0_1_0 - 3.81066054894178*G0_1_1;
    A[405] = 0.572675540123454*G0_0_1 + 0.572675540123455*G0_1_0 + 1.19486813822751*G0_1_1;
    A[406] = -0.41981853505291*G0_0_0 - 0.346619405864201*G0_0_1 - 0.34661940586419*G0_1_0 - 0.273420276675482*G0_1_1;
    A[407] = 1.03339947089947*G0_0_0 + 0.658792162698416*G0_0_1 + 0.658792162698402*G0_1_0 + 0.327243165784826*G0_1_1;
    A[408] = 1.01187031525572*G0_0_0 + 0.152857005070539*G0_0_1 + 0.15285700507055*G0_1_0 - 0.318631503527332*G0_1_1;
    A[409] = -0.57267554012345*G0_0_1 - 0.572675540123456*G0_1_0 + 0.210985725308639*G0_1_1;
    A[410] = -0.273420276675486*G0_0_0 - 0.346619405864193*G0_0_1 - 0.346619405864193*G0_1_0 - 0.419818535052903*G0_1_1;
    A[411] = 0.32724316578483*G0_0_0 + 0.658792162698403*G0_0_1 + 0.658792162698406*G0_1_0 + 1.03339947089946*G0_1_1;
    A[412] = -0.318631503527334*G0_0_0 + 0.152857005070546*G0_0_1 + 0.152857005070551*G0_1_0 + 1.01187031525573*G0_1_1;
    A[413] = 0.210985725308642*G0_0_0 - 0.572675540123457*G0_0_1 - 0.572675540123458*G0_1_0;
    A[414] = 1.42092427248676*G0_0_0 + 1.46398258377424*G0_0_1 + 1.46398258377423*G0_1_0 + 1.42092427248676*G0_1_1;
    A[415] = -0.387524801587299*G0_0_0 - 2.93872974537035*G0_0_1 - 2.93872974537035*G0_1_0 - 5.87745949074072*G0_1_1;
    A[416] = -1.80844907407407*G0_0_0 + 1.24869102733686*G0_0_1 + 1.24869102733685*G0_1_0 - 2.02374063051146*G0_1_1;
    A[417] = -5.87745949074072*G0_0_0 - 2.93872974537036*G0_0_1 - 2.93872974537035*G0_1_0 - 0.387524801587288*G0_1_1;
    A[418] = 8.65472056878304*G0_0_0 + 3.68148561507935*G0_0_1 + 3.68148561507935*G0_1_0 + 8.65472056878304*G0_1_1;
    A[419] = -2.02374063051146*G0_0_0 + 1.24869102733686*G0_0_1 + 1.24869102733686*G0_1_0 - 1.80844907407407*G0_1_1;
    A[420] = 0.107645778218693*G0_0_0 + 0.107645778218692*G0_0_1 + 0.107645778218693*G0_1_0 + 0.107645778218693*G0_1_1;
    A[421] = 0.107645778218692*G0_0_0;
    A[422] = -0.21529155643739*G0_1_1;
    A[423] = -0.990341159611984*G0_0_0 - 0.262655698853616*G0_0_1 - 0.262655698853613*G0_1_0;
    A[424] = 2.02374063051146*G0_0_0 + 0.413359788359796*G0_0_1 + 0.413359788359783*G0_1_0 - 0.516699735449734*G0_1_1;
    A[425] = -3.96136463844795*G0_0_0 - 1.30897266313932*G0_0_1 - 1.30897266313932*G0_1_0 + 0.731991291887127*G0_1_1;
    A[426] = -1.66205081569664*G0_0_1 - 1.66205081569665*G0_1_0 - 2.8203193893298*G0_1_1;
    A[427] = -0.99034115961198*G0_0_0 - 0.727685460758362*G0_0_1 - 0.727685460758374*G0_1_0 - 0.465029761904754*G0_1_1;
    A[428] = 2.02374063051144*G0_0_0 + 1.61038084215165*G0_0_1 + 1.61038084215167*G0_1_0 + 0.680321318342142*G0_1_1;
    A[429] = -3.96136463844794*G0_0_0 - 2.65239197530861*G0_0_1 - 2.65239197530863*G0_1_0 - 0.611428020282181*G0_1_1;
    A[430] = 1.66205081569664*G0_0_1 + 1.66205081569665*G0_1_0 + 0.503782242063491*G0_1_1;
    A[431] = -0.142092427248672*G0_0_0 - 0.404748126102292*G0_0_1 - 0.404748126102288*G0_1_0 - 0.667403824955907*G0_1_1;
    A[432] = 0.0344466490299811*G0_0_0 + 0.103339947089946*G0_0_1 + 0.103339947089945*G0_1_0 - 0.344466490299825*G0_1_1;
    A[433] = 0.0344466490299818*G0_0_0 - 0.0688932980599634*G0_0_1 - 0.0688932980599645*G0_1_0 - 0.516699735449734*G0_1_1;
    A[434] = -0.142092427248675*G0_0_0 + 0.262655698853617*G0_0_1 + 0.262655698853616*G0_1_0;
    A[435] = 1.03339947089945*G0_0_0 + 1.37786596119929*G0_0_1 + 1.37786596119929*G0_1_0 + 2.75573192239859*G0_1_1;
    A[436] = -0.0861166225749537*G0_0_0 - 0.0430583112874825*G0_0_1 - 0.0430583112874793*G0_1_0 + 1.42092427248677*G0_1_1;
    A[437] = 1.03339947089947*G0_0_0 - 0.344466490299831*G0_0_1 - 0.344466490299823*G0_1_0 + 1.03339947089947*G0_1_1;
    A[438] = -2.02374063051144*G0_0_0 - 3.27243165784831*G0_0_1 - 3.27243165784831*G0_1_0 - 6.32957175925925*G0_1_1;
    A[439] = -2.02374063051146*G0_0_0 + 1.24869102733686*G0_0_1 + 1.24869102733686*G0_1_0 - 1.80844907407407*G0_1_1;
    A[440] = 7.92272927689589*G0_0_0 + 3.96136463844795*G0_0_1 + 3.96136463844795*G0_1_0 + 7.06156305114636*G0_1_1;
}

/// Constructor
poisson2d_5_cell_integral_1_otherwise::poisson2d_5_cell_integral_1_otherwise() : ufc::cell_integral()
{
    // Do nothing
}

/// Destructor
poisson2d_5_cell_integral_1_otherwise::~poisson2d_5_cell_integral_1_otherwise()
{
    // Do nothing
}

/// Tabulate which form coefficients are used by this integral
const std::vector<bool> & poisson2d_5_cell_integral_1_otherwise::enabled_coefficients() const
{
    static const std::vector<bool> enabled({true});
    return enabled;
}

/// Tabulate the tensor for the contribution from a local cell
void poisson2d_5_cell_integral_1_otherwise::tabulate_tensor(double*  A,
                                    const double * const *  w,
                                    const double*  vertex_coordinates,
                                    int cell_orientation) const
{
    // Number of operations (multiply-add pairs) for Jacobian data:      3
    // Number of operations (multiply-add pairs) for geometry tensor:    21
    // Number of operations (multiply-add pairs) for tensor contraction: 430
    // Total number of operations (multiply-add pairs):                  454
    
    // Compute Jacobian
    double J[4];
    compute_jacobian_triangle_2d(J, vertex_coordinates);
    
    // Compute Jacobian inverse and determinant
    double K[4];
    double detJ;
    compute_jacobian_inverse_triangle_2d(K, detJ, J);
    
    // Set scale factor
    const double det = std::abs(detJ);
    
    // Compute geometry tensor
    const double G0_0 = det*w[0][0]*(1.0);
    const double G0_1 = det*w[0][1]*(1.0);
    const double G0_2 = det*w[0][2]*(1.0);
    const double G0_3 = det*w[0][3]*(1.0);
    const double G0_4 = det*w[0][4]*(1.0);
    const double G0_5 = det*w[0][5]*(1.0);
    const double G0_6 = det*w[0][6]*(1.0);
    const double G0_7 = det*w[0][7]*(1.0);
    const double G0_8 = det*w[0][8]*(1.0);
    const double G0_9 = det*w[0][9]*(1.0);
    const double G0_10 = det*w[0][10]*(1.0);
    const double G0_11 = det*w[0][11]*(1.0);
    const double G0_12 = det*w[0][12]*(1.0);
    const double G0_13 = det*w[0][13]*(1.0);
    const double G0_14 = det*w[0][14]*(1.0);
    const double G0_15 = det*w[0][15]*(1.0);
    const double G0_16 = det*w[0][16]*(1.0);
    const double G0_17 = det*w[0][17]*(1.0);
    const double G0_18 = det*w[0][18]*(1.0);
    const double G0_19 = det*w[0][19]*(1.0);
    const double G0_20 = det*w[0][20]*(1.0);
    
    // Compute element tensor
    A[0] = 0.00138945256132761*G0_0 + 0.000123877456776766*G0_1 + 0.000123877456776766*G0_2 + 0.000363647010782442*G0_3 + 0.000207201813104599*G0_4 + 0.0002072018131046*G0_5 + 0.000363647010782439*G0_6 + 0.00118136348605102*G0_7 - 0.000958243145743175*G0_8 + 0.000462681126743636*G0_9 - 2.29644326866549e-05*G0_10 + 0.00118136348605102*G0_11 - 0.000958243145743178*G0_12 + 0.00046268112674364*G0_13 - 2.29644326866524e-05*G0_14 + 0.00089248136123138*G0_15 - 0.000974683591871131*G0_16 + 0.000879433388113973*G0_17 - 0.000974683591871129*G0_18 + 0.000649789061247423*G0_19 + 0.00087943338811397*G0_20;
    A[1] = 0.000123877456776766*G0_0 + 0.00138945256132761*G0_1 + 0.000123877456776766*G0_2 + 0.00118136348605103*G0_3 - 0.000958243145743179*G0_4 + 0.000462681126743645*G0_5 - 2.29644326866583e-05*G0_6 + 0.000363647010782441*G0_7 + 0.000207201813104596*G0_8 + 0.000207201813104598*G0_9 + 0.000363647010782439*G0_10 - 2.2964432686656e-05*G0_11 + 0.000462681126743645*G0_12 - 0.000958243145743184*G0_13 + 0.00118136348605104*G0_14 + 0.000879433388113974*G0_15 - 0.000974683591871123*G0_16 + 0.000892481361231397*G0_17 + 0.000649789061247414*G0_18 - 0.000974683591871121*G0_19 + 0.000879433388113975*G0_20;
    A[2] = 0.000123877456776766*G0_0 + 0.000123877456776766*G0_1 + 0.0013894525613276*G0_2 - 2.29644326866529e-05*G0_3 + 0.000462681126743639*G0_4 - 0.000958243145743175*G0_5 + 0.00118136348605102*G0_6 - 2.29644326866535e-05*G0_7 + 0.000462681126743641*G0_8 - 0.000958243145743179*G0_9 + 0.00118136348605102*G0_10 + 0.000363647010782441*G0_11 + 0.000207201813104597*G0_12 + 0.000207201813104598*G0_13 + 0.000363647010782441*G0_14 + 0.000879433388113972*G0_15 + 0.000649789061247418*G0_16 + 0.00087943338811397*G0_17 - 0.000974683591871128*G0_18 - 0.000974683591871128*G0_19 + 0.000892481361231383*G0_20;
    A[3] = 0.000363647010782442*G0_0 + 0.00118136348605103*G0_1 - 2.29644326866528e-05*G0_2 + 0.0147050657033301*G0_3 - 0.00958373625474352*G0_4 + 0.00770482812583534*G0_5 - 0.00396984582097442*G0_6 - 0.000411011153198676*G0_7 - 0.00144832501603338*G0_8 - 4.56679059109703e-05*G0_9 - 0.00248237688558877*G0_10 - 0.00248237688558879*G0_11 + 0.00576068013134007*G0_12 - 0.00735253285166507*G0_13 + 0.00735253285166507*G0_14 + 0.000782878387045102*G0_15 - 0.00381653213684478*G0_16 + 0.0102426588971732*G0_17 - 0.00137003717732889*G0_18 + 9.78597983806416e-05*G0_19 - 0.00280531422024484*G0_20;
    A[4] = 0.000207201813104599*G0_0 - 0.000958243145743179*G0_1 + 0.000462681126743639*G0_2 - 0.00958373625474352*G0_3 + 0.0220771705146713*G0_4 - 0.0134785562302928*G0_5 + 0.00770482812583533*G0_6 - 0.00144832501603339*G0_7 + 0.00281836219336229*G0_8 - 0.00135698920421148*G0_9 + 0.00576068013134005*G0_10 - 4.56679059109569e-05*G0_11 - 0.00135698920421149*G0_12 + 0.00294884192453649*G0_13 - 0.00735253285166505*G0_14 + 0.00313151354818032*G0_15 - 0.00548014870931555*G0_16 - 0.00143527704291599*G0_17 - 0.000587158790283816*G0_18 + 0.00528442911255431*G0_19 + 0.00508870951579303*G0_20;
    A[5] = 0.0002072018131046*G0_0 + 0.000462681126743645*G0_1 - 0.000958243145743175*G0_2 + 0.00770482812583534*G0_3 - 0.0134785562302928*G0_4 + 0.0220771705146713*G0_5 - 0.00958373625474352*G0_6 - 4.5667905910974e-05*G0_7 - 0.00135698920421146*G0_8 + 0.00294884192453646*G0_9 - 0.00735253285166504*G0_10 - 0.00144832501603341*G0_11 + 0.0028183621933623*G0_12 - 0.00135698920421149*G0_13 + 0.00576068013134006*G0_14 + 0.00313151354818032*G0_15 - 0.000587158790283826*G0_16 + 0.00508870951579305*G0_17 - 0.00548014870931557*G0_18 + 0.00528442911255432*G0_19 - 0.00143527704291596*G0_20;
    A[6] = 0.000363647010782439*G0_0 - 2.29644326866583e-05*G0_1 + 0.00118136348605102*G0_2 - 0.00396984582097442*G0_3 + 0.00770482812583533*G0_4 - 0.00958373625474353*G0_5 + 0.0147050657033301*G0_6 - 0.00248237688558877*G0_7 + 0.00576068013134004*G0_8 - 0.00735253285166505*G0_9 + 0.00735253285166504*G0_10 - 0.000411011153198661*G0_11 - 0.00144832501603341*G0_12 - 4.56679059109563e-05*G0_13 - 0.00248237688558878*G0_14 + 0.000782878387045054*G0_15 - 0.00137003717732887*G0_16 - 0.0028053142202449*G0_17 - 0.00381653213684476*G0_18 + 9.78597983806297e-05*G0_19 + 0.0102426588971731*G0_20;
    A[7] = 0.00118136348605102*G0_0 + 0.000363647010782441*G0_1 - 2.29644326866535e-05*G0_2 - 0.000411011153198676*G0_3 - 0.00144832501603339*G0_4 - 4.56679059109742e-05*G0_5 - 0.00248237688558877*G0_6 + 0.0147050657033301*G0_7 - 0.0095837362547435*G0_8 + 0.00770482812583533*G0_9 - 0.00396984582097443*G0_10 + 0.00735253285166505*G0_11 - 0.00735253285166505*G0_12 + 0.00576068013134007*G0_13 - 0.00248237688558878*G0_14 + 0.0102426588971732*G0_15 - 0.00381653213684478*G0_16 + 0.000782878387045114*G0_17 + 9.78597983806161e-05*G0_18 - 0.0013700371773289*G0_19 - 0.00280531422024483*G0_20;
    A[8] = -0.000958243145743174*G0_0 + 0.000207201813104596*G0_1 + 0.000462681126743641*G0_2 - 0.00144832501603338*G0_3 + 0.00281836219336229*G0_4 - 0.00135698920421146*G0_5 + 0.00576068013134004*G0_6 - 0.0095837362547435*G0_7 + 0.0220771705146712*G0_8 - 0.0134785562302928*G0_9 + 0.00770482812583533*G0_10 - 0.00735253285166504*G0_11 + 0.00294884192453646*G0_12 - 0.00135698920421147*G0_13 - 4.56679059109592e-05*G0_14 - 0.00143527704291599*G0_15 - 0.00548014870931555*G0_16 + 0.00313151354818031*G0_17 + 0.00528442911255428*G0_18 - 0.000587158790283804*G0_19 + 0.00508870951579299*G0_20;
    A[9] = 0.000462681126743636*G0_0 + 0.000207201813104598*G0_1 - 0.000958243145743179*G0_2 - 4.56679059109705e-05*G0_3 - 0.00135698920421148*G0_4 + 0.00294884192453646*G0_5 - 0.00735253285166505*G0_6 + 0.00770482812583533*G0_7 - 0.0134785562302928*G0_8 + 0.0220771705146713*G0_9 - 0.00958373625474354*G0_10 + 0.00576068013134005*G0_11 - 0.00135698920421148*G0_12 + 0.00281836219336229*G0_13 - 0.00144832501603341*G0_14 + 0.00508870951579303*G0_15 - 0.00058715879028382*G0_16 + 0.00313151354818031*G0_17 + 0.00528442911255426*G0_18 - 0.00548014870931557*G0_19 - 0.00143527704291599*G0_20;
    A[10] = -2.29644326866549e-05*G0_0 + 0.000363647010782439*G0_1 + 0.00118136348605102*G0_2 - 0.00248237688558877*G0_3 + 0.00576068013134005*G0_4 - 0.00735253285166504*G0_5 + 0.00735253285166504*G0_6 - 0.00396984582097443*G0_7 + 0.00770482812583533*G0_8 - 0.00958373625474354*G0_9 + 0.0147050657033301*G0_10 - 0.00248237688558878*G0_11 - 4.56679059109699e-05*G0_12 - 0.0014483250160334*G0_13 - 0.000411011153198663*G0_14 - 0.0028053142202449*G0_15 - 0.00137003717732888*G0_16 + 0.00078287838704507*G0_17 + 9.78597983806462e-05*G0_18 - 0.00381653213684477*G0_19 + 0.0102426588971731*G0_20;
    A[11] = 0.00118136348605102*G0_0 - 2.2964432686656e-05*G0_1 + 0.000363647010782441*G0_2 - 0.00248237688558879*G0_3 - 4.5667905910957e-05*G0_4 - 0.00144832501603341*G0_5 - 0.000411011153198661*G0_6 + 0.00735253285166505*G0_7 - 0.00735253285166504*G0_8 + 0.00576068013134005*G0_9 - 0.00248237688558878*G0_10 + 0.0147050657033301*G0_11 - 0.00958373625474354*G0_12 + 0.00770482812583536*G0_13 - 0.00396984582097444*G0_14 + 0.0102426588971732*G0_15 + 9.78597983806283e-05*G0_16 - 0.00280531422024486*G0_17 - 0.00381653213684478*G0_18 - 0.0013700371773289*G0_19 + 0.000782878387045098*G0_20;
    A[12] = -0.000958243145743178*G0_0 + 0.000462681126743645*G0_1 + 0.000207201813104597*G0_2 + 0.00576068013134007*G0_3 - 0.00135698920421149*G0_4 + 0.0028183621933623*G0_5 - 0.00144832501603341*G0_6 - 0.00735253285166505*G0_7 + 0.00294884192453646*G0_8 - 0.00135698920421148*G0_9 - 4.56679059109699e-05*G0_10 - 0.00958373625474354*G0_11 + 0.0220771705146713*G0_12 - 0.0134785562302928*G0_13 + 0.00770482812583536*G0_14 - 0.001435277042916*G0_15 + 0.00528442911255429*G0_16 + 0.00508870951579302*G0_17 - 0.00548014870931556*G0_18 - 0.000587158790283821*G0_19 + 0.00313151354818029*G0_20;
    A[13] = 0.00046268112674364*G0_0 - 0.000958243145743183*G0_1 + 0.000207201813104598*G0_2 - 0.00735253285166507*G0_3 + 0.00294884192453649*G0_4 - 0.00135698920421149*G0_5 - 4.56679059109561e-05*G0_6 + 0.00576068013134007*G0_7 - 0.00135698920421147*G0_8 + 0.00281836219336229*G0_9 - 0.0014483250160334*G0_10 + 0.00770482812583536*G0_11 - 0.0134785562302928*G0_12 + 0.0220771705146713*G0_13 - 0.00958373625474357*G0_14 + 0.00508870951579304*G0_15 + 0.0052844291125543*G0_16 - 0.001435277042916*G0_17 - 0.000587158790283818*G0_18 - 0.00548014870931556*G0_19 + 0.00313151354818032*G0_20;
    A[14] = -2.29644326866525e-05*G0_0 + 0.00118136348605104*G0_1 + 0.000363647010782441*G0_2 + 0.00735253285166507*G0_3 - 0.00735253285166506*G0_4 + 0.00576068013134006*G0_5 - 0.00248237688558878*G0_6 - 0.00248237688558878*G0_7 - 4.56679059109593e-05*G0_8 - 0.00144832501603341*G0_9 - 0.000411011153198664*G0_10 - 0.00396984582097444*G0_11 + 0.00770482812583536*G0_12 - 0.00958373625474357*G0_13 + 0.0147050657033301*G0_14 - 0.00280531422024487*G0_15 + 9.78597983806252e-05*G0_16 + 0.0102426588971732*G0_17 - 0.00137003717732889*G0_18 - 0.00381653213684475*G0_19 + 0.000782878387045091*G0_20;
    A[15] = 0.00089248136123138*G0_0 + 0.000879433388113974*G0_1 + 0.000879433388113972*G0_2 + 0.000782878387045102*G0_3 + 0.00313151354818032*G0_4 + 0.00313151354818032*G0_5 + 0.000782878387045054*G0_6 + 0.0102426588971732*G0_7 - 0.00143527704291599*G0_8 + 0.00508870951579303*G0_9 - 0.0028053142202449*G0_10 + 0.0102426588971732*G0_11 - 0.001435277042916*G0_12 + 0.00508870951579304*G0_13 - 0.00280531422024487*G0_14 + 0.0704590548340573*G0_15 - 0.0156575677409016*G0_16 + 0.0117431758056762*G0_17 - 0.0156575677409016*G0_18 + 0.0039143919352254*G0_19 + 0.0117431758056762*G0_20;
    A[16] = -0.000974683591871131*G0_0 - 0.000974683591871123*G0_1 + 0.000649789061247419*G0_2 - 0.00381653213684478*G0_3 - 0.00548014870931555*G0_4 - 0.000587158790283826*G0_5 - 0.00137003717732887*G0_6 - 0.00381653213684478*G0_7 - 0.00548014870931555*G0_8 - 0.00058715879028382*G0_9 - 0.00137003717732888*G0_10 + 9.78597983806269e-05*G0_11 + 0.00528442911255429*G0_12 + 0.00528442911255429*G0_13 + 9.78597983806255e-05*G0_14 - 0.0156575677409016*G0_15 + 0.0763306427368953*G0_16 - 0.0156575677409016*G0_17 - 0.0117431758056762*G0_18 - 0.0117431758056762*G0_19 + 0.00391439193522542*G0_20;
    A[17] = 0.000879433388113973*G0_0 + 0.000892481361231397*G0_1 + 0.00087943338811397*G0_2 + 0.0102426588971732*G0_3 - 0.00143527704291599*G0_4 + 0.00508870951579305*G0_5 - 0.0028053142202449*G0_6 + 0.000782878387045114*G0_7 + 0.00313151354818031*G0_8 + 0.00313151354818031*G0_9 + 0.00078287838704507*G0_10 - 0.00280531422024486*G0_11 + 0.00508870951579302*G0_12 - 0.001435277042916*G0_13 + 0.0102426588971732*G0_14 + 0.0117431758056762*G0_15 - 0.0156575677409016*G0_16 + 0.0704590548340572*G0_17 + 0.00391439193522536*G0_18 - 0.0156575677409016*G0_19 + 0.0117431758056762*G0_20;
    A[18] = -0.000974683591871129*G0_0 + 0.000649789061247414*G0_1 - 0.000974683591871128*G0_2 - 0.0013700371773289*G0_3 - 0.000587158790283816*G0_4 - 0.00548014870931558*G0_5 - 0.00381653213684476*G0_6 + 9.78597983806163e-05*G0_7 + 0.00528442911255428*G0_8 + 0.00528442911255426*G0_9 + 9.78597983806456e-05*G0_10 - 0.00381653213684478*G0_11 - 0.00548014870931556*G0_12 - 0.000587158790283819*G0_13 - 0.00137003717732889*G0_14 - 0.0156575677409016*G0_15 - 0.0117431758056762*G0_16 + 0.00391439193522536*G0_17 + 0.0763306427368953*G0_18 - 0.0117431758056762*G0_19 - 0.0156575677409016*G0_20;
    A[19] = 0.000649789061247423*G0_0 - 0.000974683591871121*G0_1 - 0.000974683591871128*G0_2 + 9.78597983806424e-05*G0_3 + 0.00528442911255431*G0_4 + 0.00528442911255432*G0_5 + 9.78597983806291e-05*G0_6 - 0.0013700371773289*G0_7 - 0.000587158790283805*G0_8 - 0.00548014870931557*G0_9 - 0.00381653213684477*G0_10 - 0.00137003717732889*G0_11 - 0.00058715879028382*G0_12 - 0.00548014870931556*G0_13 - 0.00381653213684475*G0_14 + 0.0039143919352254*G0_15 - 0.0117431758056762*G0_16 - 0.0156575677409016*G0_17 - 0.0117431758056762*G0_18 + 0.0763306427368953*G0_19 - 0.0156575677409016*G0_20;
    A[20] = 0.00087943338811397*G0_0 + 0.000879433388113975*G0_1 + 0.000892481361231383*G0_2 - 0.00280531422024484*G0_3 + 0.00508870951579303*G0_4 - 0.00143527704291596*G0_5 + 0.0102426588971731*G0_6 - 0.00280531422024483*G0_7 + 0.00508870951579299*G0_8 - 0.00143527704291599*G0_9 + 0.0102426588971731*G0_10 + 0.000782878387045098*G0_11 + 0.00313151354818029*G0_12 + 0.00313151354818032*G0_13 + 0.000782878387045092*G0_14 + 0.0117431758056762*G0_15 + 0.00391439193522542*G0_16 + 0.0117431758056762*G0_17 - 0.0156575677409016*G0_18 - 0.0156575677409016*G0_19 + 0.0704590548340572*G0_20;
}

/// Constructor
poisson2d_5_form_0::poisson2d_5_form_0() : ufc::form()
{
    // Do nothing
}

/// Destructor
poisson2d_5_form_0::~poisson2d_5_form_0()
{
    // Do nothing
}

/// Return a string identifying the form
const char* poisson2d_5_form_0::signature() const
{
    return "311950eb8e4060ca8412d088252e60b2ed7ae16455fb6e9d1a9582ec25d384adc3f1c21dc129309817217a6894a6d5ef811f58384158283334b545e40aee5900";
}

/// Return the rank of the global tensor (r)
std::size_t poisson2d_5_form_0::rank() const
{
    return 2;
}

/// Return the number of coefficients (n)
std::size_t poisson2d_5_form_0::num_coefficients() const
{
    return 0;
}

/// Return the number of cell domains
std::size_t poisson2d_5_form_0::num_cell_domains() const
{
    return 0;
}

/// Return the number of exterior facet domains
std::size_t poisson2d_5_form_0::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
std::size_t poisson2d_5_form_0::num_interior_facet_domains() const
{
    return 0;
}

/// Return the number of point domains
std::size_t poisson2d_5_form_0::num_point_domains() const
{
    return 0;
}

/// Return the number of custom domains
std::size_t poisson2d_5_form_0::num_custom_domains() const
{
    return 0;
}

/// Return whether the form has any cell integrals
bool poisson2d_5_form_0::has_cell_integrals() const
{
    return true;
}

/// Return whether the form has any exterior facet integrals
bool poisson2d_5_form_0::has_exterior_facet_integrals() const
{
    return false;
}

/// Return whether the form has any interior facet integrals
bool poisson2d_5_form_0::has_interior_facet_integrals() const
{
    return false;
}

/// Return whether the form has any point integrals
bool poisson2d_5_form_0::has_point_integrals() const
{
    return false;
}

/// Return whether the form has any custom integrals
bool poisson2d_5_form_0::has_custom_integrals() const
{
    return false;
}

/// Create a new finite element for argument function i
ufc::finite_element* poisson2d_5_form_0::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new poisson2d_5_finite_element_0();
        break;
      }
    case 1:
      {
        return new poisson2d_5_finite_element_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new dofmap for argument function i
ufc::dofmap* poisson2d_5_form_0::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new poisson2d_5_dofmap_0();
        break;
      }
    case 1:
      {
        return new poisson2d_5_dofmap_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new cell integral on sub domain i
ufc::cell_integral* poisson2d_5_form_0::create_cell_integral(std::size_t i) const
{
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* poisson2d_5_form_0::create_exterior_facet_integral(std::size_t i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* poisson2d_5_form_0::create_interior_facet_integral(std::size_t i) const
{
    return 0;
}

/// Create a new point integral on sub domain i
ufc::point_integral* poisson2d_5_form_0::create_point_integral(std::size_t i) const
{
    return 0;
}

/// Create a new custom integral on sub domain i
ufc::custom_integral* poisson2d_5_form_0::create_custom_integral(std::size_t i) const
{
    return 0;
}

/// Create a new cell integral on everywhere else
ufc::cell_integral* poisson2d_5_form_0::create_default_cell_integral() const
{
    return new poisson2d_5_cell_integral_0_otherwise();
}

/// Create a new exterior facet integral on everywhere else
ufc::exterior_facet_integral* poisson2d_5_form_0::create_default_exterior_facet_integral() const
{
    return 0;
}

/// Create a new interior facet integral on everywhere else
ufc::interior_facet_integral* poisson2d_5_form_0::create_default_interior_facet_integral() const
{
    return 0;
}

/// Create a new point integral on everywhere else
ufc::point_integral* poisson2d_5_form_0::create_default_point_integral() const
{
    return 0;
}

/// Create a new custom integral on everywhere else
ufc::custom_integral* poisson2d_5_form_0::create_default_custom_integral() const
{
    return 0;
}


/// Constructor
poisson2d_5_form_1::poisson2d_5_form_1() : ufc::form()
{
    // Do nothing
}

/// Destructor
poisson2d_5_form_1::~poisson2d_5_form_1()
{
    // Do nothing
}

/// Return a string identifying the form
const char* poisson2d_5_form_1::signature() const
{
    return "a51bef4a7c80c9f468e5d607eea59bea10066600f30854ef9ddf7becd2d5a8380ebf22b5323da23da6f335cdd9b7a5537430da6723fb0bbfb9904151d9f7ed27";
}

/// Return the rank of the global tensor (r)
std::size_t poisson2d_5_form_1::rank() const
{
    return 1;
}

/// Return the number of coefficients (n)
std::size_t poisson2d_5_form_1::num_coefficients() const
{
    return 1;
}

/// Return the number of cell domains
std::size_t poisson2d_5_form_1::num_cell_domains() const
{
    return 0;
}

/// Return the number of exterior facet domains
std::size_t poisson2d_5_form_1::num_exterior_facet_domains() const
{
    return 0;
}

/// Return the number of interior facet domains
std::size_t poisson2d_5_form_1::num_interior_facet_domains() const
{
    return 0;
}

/// Return the number of point domains
std::size_t poisson2d_5_form_1::num_point_domains() const
{
    return 0;
}

/// Return the number of custom domains
std::size_t poisson2d_5_form_1::num_custom_domains() const
{
    return 0;
}

/// Return whether the form has any cell integrals
bool poisson2d_5_form_1::has_cell_integrals() const
{
    return true;
}

/// Return whether the form has any exterior facet integrals
bool poisson2d_5_form_1::has_exterior_facet_integrals() const
{
    return false;
}

/// Return whether the form has any interior facet integrals
bool poisson2d_5_form_1::has_interior_facet_integrals() const
{
    return false;
}

/// Return whether the form has any point integrals
bool poisson2d_5_form_1::has_point_integrals() const
{
    return false;
}

/// Return whether the form has any custom integrals
bool poisson2d_5_form_1::has_custom_integrals() const
{
    return false;
}

/// Create a new finite element for argument function i
ufc::finite_element* poisson2d_5_form_1::create_finite_element(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new poisson2d_5_finite_element_0();
        break;
      }
    case 1:
      {
        return new poisson2d_5_finite_element_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new dofmap for argument function i
ufc::dofmap* poisson2d_5_form_1::create_dofmap(std::size_t i) const
{
    switch (i)
    {
    case 0:
      {
        return new poisson2d_5_dofmap_0();
        break;
      }
    case 1:
      {
        return new poisson2d_5_dofmap_0();
        break;
      }
    }
    
    return 0;
}

/// Create a new cell integral on sub domain i
ufc::cell_integral* poisson2d_5_form_1::create_cell_integral(std::size_t i) const
{
    return 0;
}

/// Create a new exterior facet integral on sub domain i
ufc::exterior_facet_integral* poisson2d_5_form_1::create_exterior_facet_integral(std::size_t i) const
{
    return 0;
}

/// Create a new interior facet integral on sub domain i
ufc::interior_facet_integral* poisson2d_5_form_1::create_interior_facet_integral(std::size_t i) const
{
    return 0;
}

/// Create a new point integral on sub domain i
ufc::point_integral* poisson2d_5_form_1::create_point_integral(std::size_t i) const
{
    return 0;
}

/// Create a new custom integral on sub domain i
ufc::custom_integral* poisson2d_5_form_1::create_custom_integral(std::size_t i) const
{
    return 0;
}

/// Create a new cell integral on everywhere else
ufc::cell_integral* poisson2d_5_form_1::create_default_cell_integral() const
{
    return new poisson2d_5_cell_integral_1_otherwise();
}

/// Create a new exterior facet integral on everywhere else
ufc::exterior_facet_integral* poisson2d_5_form_1::create_default_exterior_facet_integral() const
{
    return 0;
}

/// Create a new interior facet integral on everywhere else
ufc::interior_facet_integral* poisson2d_5_form_1::create_default_interior_facet_integral() const
{
    return 0;
}

/// Create a new point integral on everywhere else
ufc::point_integral* poisson2d_5_form_1::create_default_point_integral() const
{
    return 0;
}

/// Create a new custom integral on everywhere else
ufc::custom_integral* poisson2d_5_form_1::create_default_custom_integral() const
{
    return 0;
}


